// Microsoft (c) 2019
/**
 * \brief Unit tests for ir::Not
 * \author generated by script
 */

#include "nnfusion/core/operators/not.hpp"
#include "../test_util/common.hpp"
#include "nnfusion/core/operators/parameter.hpp"

using namespace ngraph;

namespace nnfusion
{
    namespace test
    {
        template <typename T, size_t N>
        using NDArray = nnfusion::test::NDArrayayay<T, N>;
    }

    namespace inventory
    {
        template <>
        shared_ptr<op::Not> create_object<op::Not, float>(int option)
        {
            switch (option)
            {
            case 0:
            {
                Shape shape{2, 2};
                auto A = make_shared<op::Parameter>(element::f32, shape);
                return make_shared<op::Not>(A);
            }
            default: return nullptr;
            }
        }

        template <>
        vector<float> generate_input<op::Not, float>(int option)
        {
            switch (option)
            {
            case 0:
            {
                vector<float> a = vector<float>{1, 0, 2, 0};
                auto return_vector = vector<float>();
                return_vector.insert(return_vector.end(), a.begin(), a.end());
                return return_vector;
            }
            default: return vector<float>();
            }
        }

        template <>
        vector<float> generate_output<op::Not, float>(int option)
        {
            switch (option)
            {
            case 0:
            {
                vector<float> result = vector<float>{0, 1, 0, 1};
                auto return_vector = vector<float>();
                return_vector.insert(return_vector.end(), result.begin(), result.end());
                return return_vector;
            }
            default: return vector<float>();
            }
        }
    }
}