[
  [
    204,
    " - einstein_v2(\" output0[N0, N1, N2] = input0[input1[N0, N1].when(input1[N0, N1] >= 0, input1[N0, N1] + const(32000).cast(input1[N0, N1].dtype())), N2]; output1[N0, N1, N2] = output0[N0, N1, N2].cast(`float32`);\", input_dict={ \"input0\" : { \"dtype\" : \"float16\", \"shape\" : [32000, 8192]} ,  \"input1\" : { \"dtype\" : \"int64\", \"shape\" : [16, 512]} }, extra_outputs=[\"output0\", \"output1\"]) ## @:  ",
    "GatherV2_Convert",
    [
      [
        0,
        0
      ],
      [
        33,
        0
      ]
    ]
  ],
  [
    46,
    " - einstein_v2(\" output0[N0] = input0[0] where N0 in 1;  \", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [1]} }) ## @: memcpy ",
    "Reshape",
    [
      [
        5,
        0
      ]
    ]
  ],
  [
    199,
    " - einstein_v2(\" mediate0[N0, N1, N2] = input0[0] where N0 in 16, N1 in 512, N2 in 8192; output0[N0, N1, N2] = input1[N0, N1, N2].call(`pow`, [mediate0[N0, N1, N2]]);\", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [1]} ,  \"input1\" : { \"dtype\" : \"float32\", \"shape\" : [16, 512, 8192]} }) ## @:  ",
    "Broadcast_Power",
    [
      [
        19,
        0
      ],
      [
        204,
        1
      ]
    ]
  ],
  [
    200,
    " - einstein_v2(\" mediate0[N0, N1] = input0[0] where N0 in 16, N1 in 512; mediate1[N0, N1] +=! input1[N0, N1, N2];output0[N0, N1] = mediate1[N0, N1] / mediate0[N0, N1];\", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [1]} ,  \"input1\" : { \"dtype\" : \"float32\", \"shape\" : [16, 512, 8192]} }) ## @:  ",
    "Sum_Broadcast_Divide",
    [
      [
        42,
        0
      ],
      [
        199,
        0
      ]
    ]
  ],
  [
    205,
    " - einstein_v2(\" mediate0[N0, N1, N2] = input0[N2] where N0 in 16, N1 in 512;  mediate1[N0, N1, N2] = input1[N2] where N0 in 16, N1 in 512;  mediate2[N0, N1, N2] = input2[N0, N1] where N2 in 1;   mediate3[N0, N1, N2] = mediate2[N0, N1, N2] + mediate1[N0, N1, N2]; mediate4[N0, N1, N2] = mediate3[N0, N1, N2].call(`sqrt`); mediate5[N0, N1] = mediate4[N0, N1, 0] ;   mediate6[N0, N1, N2] = mediate5[N0, N1] where N2 in 8192; mediate7[N0, N1, N2] = input3[N0, N1, N2] / mediate6[N0, N1, N2];mediate8[N0, N1, N2] = mediate7[N0, N1, N2].cast(`float16`);output0[N0, N1, N2] = mediate0[N0, N1, N2] * mediate8[N0, N1, N2];\", input_dict={ \"input0\" : { \"dtype\" : \"float16\", \"shape\" : [8192]} ,  \"input1\" : { \"dtype\" : \"float32\", \"shape\" : [1]} ,  \"input2\" : { \"dtype\" : \"float32\", \"shape\" : [16, 512]} ,  \"input3\" : { \"dtype\" : \"float32\", \"shape\" : [16, 512, 8192]} }) ## @:  ",
    "Reshape_Broadcast_Add_Sqrt_Reshape_Broadcast_Divide_Convert_Broadcast_Multiply",
    [
      [
        1,
        0
      ],
      [
        46,
        0
      ],
      [
        200,
        0
      ],
      [
        204,
        1
      ]
    ]
  ],
  [
    177,
    " - einstein_v2(\" mediate0[N0, N1] = input0[N0 // 512 , N0 % 512, N1] where N0 in 8192;output0[N0, N1, N2, N3] = mediate0[(N0 * 16 + N2) // 16 * 16 + (N0 * 16 + N2)  % 8 * 2 + (N1 * 16 + N3) % 16 // 8, (N1 * 16 + N3) // 16 * 16 + (N0 * 16 + N2)  % 16 // 8 * 8 + (N1 * 16 + N3) % 8] where N0 in 512, N1 in 512, N2 in 16, N3 in 16;\", input_dict={ \"input0\" : { \"dtype\" : \"float16\", \"shape\" : [16, 512, 8192]} })  ",
    "Permutate",
    [
      [
        205,
        0
      ]
    ]
  ],
  [
    178,
    " - einstein_v2(\" temp0[M, K] +=! input0[M//1024%16, M//2%512, K] where M in 16384; output0[M, N] +=! temp0[M, K] * input1[K, N]; \", input_dict={ \"input0\" : { \"dtype\" : \"float16\", \"shape\" : [16, 512, 8192]} ,  \"input1\" : { \"dtype\" : \"float16\", \"shape\" : [8192, 8192]} }) ## @: output_layout=0 |skip",
    "LayoutDot",
    [
      [
        177,
        0
      ],
      [
        13,
        0
      ]
    ]
  ],
  [
    203,
    " - einstein_v2(\" mediate0[N0, N1, N2, N3] = input0[N0, N1, ((N2) * 128 + N3)] where N2 in 64, N3 in 128;   output0[N0, N2, N1, N3] = mediate0[N0, N1, N2, N3] ;  mediate1[N0, N1, N2, N3] = output0[N0, N1, N2, N3] ;   output1[N0, N1, N2, N3] = mediate1[N0, N1, N2, N3] ;  \", input_dict={ \"input0\" : { \"dtype\" : \"float16\", \"shape\" : [16, 512, 8192]} }, extra_outputs=[\"output0\", \"output1\"]) ## @:  ",
    "Reshape_Reshape_Reshape_Broadcast",
    [
      [
        178,
        0
      ]
    ]
  ],
  [
    168,
    "",
    "Result",
    [
      [
        203,
        0
      ]
    ]
  ],
  [
    65,
    " - einstein_v2(\" output0[N0, N1, N2, N3] = input0[N0 % 1, N1 % 1, N2 % 512, N3 % 128] where N0 in 1, N1 in 1, N2 in 512, N3 in 128; \", input_dict={ \"input0\" : { \"dtype\" : \"float16\", \"shape\" : [1, 1, 512, 128]} })  ",
    "Tile",
    [
      [
        15,
        0
      ],
      [
        18,
        0
      ]
    ]
  ],
  [
    66,
    " - einstein_v2(\" output0[N0, N1, N2, N3] = input0[N0, N1, input1[N0, N1, N2, N3].when(input1[N0, N1, N2, N3] >= 0, input1[N0, N1, N2, N3] + const(512).cast(input1[N0, N1, N2, N3].dtype())), N3]; \", input_dict={ \"input0\" : { \"dtype\" : \"float16\", \"shape\" : [1, 1, 512, 128]} ,  \"input1\" : { \"dtype\" : \"int64\", \"shape\" : [1, 1, 512, 128]} })  ",
    "GatherElements",
    [
      [
        65,
        0
      ],
      [
        28,
        0
      ]
    ]
  ],
  [
    173,
    " - einstein_v2(\" mediate0[N0, N1] = input0[N0 // 512 , N0 % 512, N1] where N0 in 8192;output0[N0, N1, N2, N3] = mediate0[(N0 * 16 + N2) // 16 * 16 + (N0 * 16 + N2)  % 8 * 2 + (N1 * 16 + N3) % 16 // 8, (N1 * 16 + N3) // 16 * 16 + (N0 * 16 + N2)  % 16 // 8 * 8 + (N1 * 16 + N3) % 8] where N0 in 512, N1 in 512, N2 in 16, N3 in 16;\", input_dict={ \"input0\" : { \"dtype\" : \"float16\", \"shape\" : [16, 512, 8192]} })  ",
    "Permutate",
    [
      [
        205,
        0
      ]
    ]
  ],
  [
    174,
    " - einstein_v2(\" temp0[M, K] +=! input0[M//1024%16, M//2%512, K] where M in 16384; output0[M, N] +=! temp0[M, K] * input1[K, N]; \", input_dict={ \"input0\" : { \"dtype\" : \"float16\", \"shape\" : [16, 512, 8192]} ,  \"input1\" : { \"dtype\" : \"float16\", \"shape\" : [8192, 8192]} }) ## @: output_layout=0 |skip",
    "LayoutDot",
    [
      [
        173,
        0
      ],
      [
        11,
        0
      ]
    ]
  ],
  [
    196,
    " - einstein_v2(\" mediate0[N0, N2, N1, N3] = input0[N0, N1, N2, N3] ;  mediate1[N0, N1] = mediate0[0, N0, 0, N1] ;   mediate2[N0, N1, N2, N3] = mediate1[N1, N3] where N0 in 16, N2 in 64;  output0[N0, N1, N2, N3] = input1[N0, N1, ((N2) * 128 + N3)] where N2 in 64, N3 in 128;  output1[N0, N1, N2, N3] = output0[N0, N1, N2, N3] * mediate2[N0, N1, N2, N3];\", input_dict={ \"input0\" : { \"dtype\" : \"float16\", \"shape\" : [1, 1, 512, 128]} ,  \"input1\" : { \"dtype\" : \"float16\", \"shape\" : [16, 512, 8192]} }, extra_outputs=[\"output0\", \"output1\"]) ## @:  ",
    "Reshape_Reshape_Reshape_Broadcast_Multiply",
    [
      [
        66,
        0
      ],
      [
        174,
        0
      ]
    ]
  ],
  [
    34,
    " - einstein_v2(\" output0[N0, N1, N2, N3] = input0[N0 % 1, N1 % 1, N2 % 512, N3 % 128] where N0 in 1, N1 in 1, N2 in 512, N3 in 128; \", input_dict={ \"input0\" : { \"dtype\" : \"float16\", \"shape\" : [1, 1, 512, 128]} })  ",
    "Tile",
    [
      [
        4,
        0
      ],
      [
        20,
        0
      ]
    ]
  ],
  [
    35,
    " - einstein_v2(\" output0[N0, N1, N2, N3] = input0[N0, N1, input1[N0, N1, N2, N3].when(input1[N0, N1, N2, N3] >= 0, input1[N0, N1, N2, N3] + const(512).cast(input1[N0, N1, N2, N3].dtype())), N3]; \", input_dict={ \"input0\" : { \"dtype\" : \"float16\", \"shape\" : [1, 1, 512, 128]} ,  \"input1\" : { \"dtype\" : \"int64\", \"shape\" : [1, 1, 512, 128]} })  ",
    "GatherElements",
    [
      [
        34,
        0
      ],
      [
        28,
        0
      ]
    ]
  ],
  [
    60,
    " - einstein_v2(\" output0[N0, N1, N2, N3] = input0[N0 + 0, N1 + 0, N2 + 0, N3 + 0] where N0 in 16 , N1 in 512 , N2 in 64 , N3 in 64; \", input_dict={ \"input0\" : { \"dtype\" : \"float16\", \"shape\" : [16, 512, 64, 128]} })  ",
    "Slice",
    [
      [
        196,
        0
      ]
    ]
  ],
  [
    201,
    " - einstein_v2(\" mediate0[N0, N1, N2, N3] = input0[N0 + 0, N1 + 0, N2 + 0, N3 + 64] where N0 in 16 , N1 in 512 , N2 in 64 , N3 in 64; output0[N0, N1, N2, N3] = -mediate0[N0, N1, N2, N3];\", input_dict={ \"input0\" : { \"dtype\" : \"float16\", \"shape\" : [16, 512, 64, 128]} }) ## @:  ",
    "Slice_Negative",
    [
      [
        196,
        0
      ]
    ]
  ],
  [
    208,
    " - einstein_v2(\" mediate0[N0, N2, N1, N3] = input0[N0, N1, N2, N3] ;  mediate1[N0, N1] = mediate0[0, N0, 0, N1] ;   mediate2[N0, N1, N2, N3] = mediate1[N1, N3] where N0 in 16, N2 in 64;  mediate3[N0, N1, N2, N3] =  input1[N0, N1, N2, N3 - 0].when(N3 < 64, input2[N0, N1, N2, N3 - 64])  where N3 in 128; output0[N0, N1, N2, N3] = mediate3[N0, N1, N2, N3] * mediate2[N0, N1, N2, N3];\", input_dict={ \"input0\" : { \"dtype\" : \"float16\", \"shape\" : [1, 1, 512, 128]} ,  \"input1\" : { \"dtype\" : \"float16\", \"shape\" : [16, 512, 64, 64]} ,  \"input2\" : { \"dtype\" : \"float16\", \"shape\" : [16, 512, 64, 64]} }) ## @:  ",
    "Reshape_Concat_Reshape_Broadcast_Multiply",
    [
      [
        35,
        0
      ],
      [
        201,
        0
      ],
      [
        60,
        0
      ]
    ]
  ],
  [
    71,
    " - einstein_v2(\" output0[N0, N1, N2, N3] = input0[N0, N1, N2, N3] + input1[N0, N1, N2, N3]; \", input_dict={ \"input0\" : { \"dtype\" : \"float16\", \"shape\" : [16, 512, 64, 128]} ,  \"input1\" : { \"dtype\" : \"float16\", \"shape\" : [16, 512, 64, 128]} })  ",
    "Add",
    [
      [
        196,
        1
      ],
      [
        208,
        0
      ]
    ]
  ],
  [
    72,
    " - einstein_v2(\" output0[N0, N2, N1, N3] = input0[N0, N1, N2, N3] ; \", input_dict={ \"input0\" : { \"dtype\" : \"float16\", \"shape\" : [16, 512, 64, 128]} })  ",
    "Reshape",
    [
      [
        71,
        0
      ]
    ]
  ],
  [
    167,
    "",
    "Result",
    [
      [
        72,
        0
      ]
    ]
  ],
  [
    107,
    " - einstein_v2(\" output0[N0, N1, N2, N3] = input0[0] where N0 in 16, N1 in 64, N2 in 512, N3 in 512; \", input_dict={ \"input0\" : { \"dtype\" : \"float16\", \"shape\" : [1]} })  ",
    "Broadcast",
    [
      [
        31,
        0
      ]
    ]
  ],
  [
    211,
    " - einstein_v2(\" mediate0[N0] = input0[0] where N0 in 1;   mediate1[N0, N1, N2, N3] = mediate0[N1] where N0 in 16, N2 in 512, N3 in 512; output0[N0, N1, N2, N3] = mediate1[N0, N1, N2, N3] - input1[N0, N1, N2, N3];output1[N0, N1, N2, N3] = (output0[N0, N1, N2, N3] != 0).cast(`int16`);\", input_dict={ \"input0\" : { \"dtype\" : \"float16\", \"shape\" : [1]} ,  \"input1\" : { \"dtype\" : \"float16\", \"shape\" : [16, 1, 512, 512]} }, extra_outputs=[\"output0\", \"output1\"]) ## @:  ",
    "Reshape_Broadcast_Subtract_Convert",
    [
      [
        30,
        0
      ],
      [
        16,
        0
      ]
    ]
  ],
  [
    210,
    " - einstein_v2(\" mediate0[N0] = input0[0] where N0 in 1;   output0[N0, N1, N2, N3] = mediate0[N1] where N0 in 16, N2 in 512, N3 in 512; \", input_dict={ \"input0\" : { \"dtype\" : \"float16\", \"shape\" : [1]} }) ## @:  ",
    "Reshape_Broadcast",
    [
      [
        31,
        0
      ]
    ]
  ],
  [
    202,
    " - einstein_v2(\"mediate0[N0, N1, N2, N3] = input2[N0, N1, N2, N3].when([input0[N0, N1, N2, N3] == 0], input1[N0, N1, N2, N3]); output0[N0, N1, N2, N3] = mediate0[N0, N1, N2, N3] + input3[N0, N1, N2, N3]; \", input_dict={ \"input0\" : { \"dtype\" : \"int16\", \"shape\" : [16, 1, 512, 512]} ,  \"input1\" : { \"dtype\" : \"float16\", \"shape\" : [16, 1, 512, 512]} ,  \"input2\" : { \"dtype\" : \"float16\", \"shape\" : [16, 1, 512, 512]} ,  \"input3\" : { \"dtype\" : \"float16\", \"shape\" : [16, 1, 512, 512]} }) ## @:  ",
    "Select_Add",
    [
      [
        211,
        1
      ],
      [
        210,
        0
      ],
      [
        211,
        0
      ],
      [
        17,
        0
      ]
    ]
  ],
  [
    175,
    " - einstein_v2(\" mediate0[N0, N1] = input0[N0 // 512 , N0 % 512, N1] where N0 in 8192;output0[N0, N1, N2, N3] = mediate0[(N0 * 16 + N2) // 16 * 16 + (N0 * 16 + N2)  % 8 * 2 + (N1 * 16 + N3) % 16 // 8, (N1 * 16 + N3) // 16 * 16 + (N0 * 16 + N2)  % 16 // 8 * 8 + (N1 * 16 + N3) % 8] where N0 in 512, N1 in 512, N2 in 16, N3 in 16;\", input_dict={ \"input0\" : { \"dtype\" : \"float16\", \"shape\" : [16, 512, 8192]} })  ",
    "Permutate",
    [
      [
        205,
        0
      ]
    ]
  ],
  [
    176,
    " - einstein_v2(\" temp0[M, K] +=! input0[M//1024%16, M//2%512, K] where M in 16384; output0[M, N] +=! temp0[M, K] * input1[K, N]; \", input_dict={ \"input0\" : { \"dtype\" : \"float16\", \"shape\" : [16, 512, 8192]} ,  \"input1\" : { \"dtype\" : \"float16\", \"shape\" : [8192, 8192]} }) ## @: output_layout=0 |skip",
    "LayoutDot",
    [
      [
        175,
        0
      ],
      [
        9,
        0
      ]
    ]
  ],
  [
    193,
    " - einstein_v2(\" mediate0[N0, N1, N2, N3] = input0[N0, N1, ((N2) * 128 + N3)] where N2 in 64, N3 in 128;   output0[N0, N2, N1, N3] = mediate0[N0, N1, N2, N3] ;  mediate1[N0, N1] = input1[0, 0, N0, N1] ;   mediate2[N0, N1, N2, N3] = mediate1[N2, N3] where N0 in 16, N1 in 64; output1[N0, N1, N2, N3] = output0[N0, N1, N2, N3] * mediate2[N0, N1, N2, N3];\", input_dict={ \"input0\" : { \"dtype\" : \"float16\", \"shape\" : [16, 512, 8192]} ,  \"input1\" : { \"dtype\" : \"float16\", \"shape\" : [1, 1, 512, 128]} }, extra_outputs=[\"output0\", \"output1\"]) ## @:  ",
    "Reshape_Reshape_Reshape_Broadcast_Multiply",
    [
      [
        176,
        0
      ],
      [
        66,
        0
      ]
    ]
  ],
  [
    79,
    " - einstein_v2(\" output0[N0, N1, N2, N3] = input0[N0 + 0, N1 + 0, N2 + 0, N3 + 0] where N0 in 16 , N1 in 64 , N2 in 512 , N3 in 64; \", input_dict={ \"input0\" : { \"dtype\" : \"float16\", \"shape\" : [16, 64, 512, 128]} })  ",
    "Slice",
    [
      [
        193,
        0
      ]
    ]
  ],
  [
    198,
    " - einstein_v2(\" mediate0[N0, N1, N2, N3] = input0[N0 + 0, N1 + 0, N2 + 0, N3 + 64] where N0 in 16 , N1 in 64 , N2 in 512 , N3 in 64; output0[N0, N1, N2, N3] = -mediate0[N0, N1, N2, N3];\", input_dict={ \"input0\" : { \"dtype\" : \"float16\", \"shape\" : [16, 64, 512, 128]} }) ## @:  ",
    "Slice_Negative",
    [
      [
        193,
        0
      ]
    ]
  ],
  [
    192,
    " - einstein_v2(\" mediate0[N0, N1] = input0[0, 0, N0, N1] ;   mediate1[N0, N1, N2, N3] = mediate0[N2, N3] where N0 in 16, N1 in 64;  mediate2[N0, N1, N2, N3] =  input1[N0, N1, N2, N3 - 0].when(N3 < 64, input2[N0, N1, N2, N3 - 64])  where N3 in 128; output0[N0, N1, N2, N3] = mediate2[N0, N1, N2, N3] * mediate1[N0, N1, N2, N3];\", input_dict={ \"input0\" : { \"dtype\" : \"float16\", \"shape\" : [1, 1, 512, 128]} ,  \"input1\" : { \"dtype\" : \"float16\", \"shape\" : [16, 64, 512, 64]} ,  \"input2\" : { \"dtype\" : \"float16\", \"shape\" : [16, 64, 512, 64]} }) ## @:  ",
    "Concat_Reshape_Broadcast_Multiply",
    [
      [
        35,
        0
      ],
      [
        198,
        0
      ],
      [
        79,
        0
      ]
    ]
  ],
  [
    197,
    " - einstein_v2(\" mediate0[N0, N1, N2, N3] = input0[N0, N1, N2, N3] + input1[N0, N1, N2, N3];  mediate1[N0, N1, N2, N3] = mediate0[N0, N1, N2, N3] ;   output0[N0, N1, N2, N3] = mediate1[N0, N1, N2, N3] ;  \", input_dict={ \"input0\" : { \"dtype\" : \"float16\", \"shape\" : [16, 64, 512, 128]} ,  \"input1\" : { \"dtype\" : \"float16\", \"shape\" : [16, 64, 512, 128]} }) ## @:  ",
    "Add_Reshape_Broadcast",
    [
      [
        193,
        1
      ],
      [
        192,
        0
      ]
    ]
  ],
  [
    212,
    " - einstein_v2(\" mediate0[N0, N2, N3, N1] = input0[N0, N1, N2, N3] ;  mediate1[N0, N1, N2, N3] = mediate0[N0, N1, N2, N3] ;   output0[N0, N1, N2, N3] = mediate1[N0, N1, N2, N3] ;  \", input_dict={ \"input0\" : { \"dtype\" : \"float16\", \"shape\" : [16, 512, 64, 128]} }) ## @:  ",
    "Reshape_Reshape_Broadcast",
    [
      [
        71,
        0
      ]
    ]
  ],
  [
    92,
    " - einstein_v2(\" output0[B0, B1, N, M] +=! input0[B0, B1, N, K] * input1[B0, B1, K, M]; \", input_dict={ \"input0\" : { \"dtype\" : \"float16\", \"shape\" : [16, 64, 512, 128]} ,  \"input1\" : { \"dtype\" : \"float16\", \"shape\" : [16, 64, 128, 512]} }) ## @: tensorCoreConfig=(2, 3) |skip",
    "BatchMatMul",
    [
      [
        197,
        0
      ],
      [
        212,
        0
      ]
    ]
  ],
  [
    195,
    " - einstein_v2(\" mediate0[N0, N1, N2] = input0[N0, 0, N1, N2] ;   mediate1[N0, N1, N2, N3] = mediate0[N0, N2, N3] where N1 in 64;  mediate2[N0, N1, N2, N3] = input1[0] where N0 in 16, N1 in 64, N2 in 512, N3 in 512;  mediate3[N0, N1, N2, N3] = input2[N0, N1, N2, N3] ;  mediate4[N0, N1, N2, N3] = mediate3[N0, N1, N2, N3] / mediate2[N0, N1, N2, N3]; mediate5[N0, N1, N2, N3] = mediate4[N0, N1, N2, N3] + mediate1[N0, N1, N2, N3]; output0[N0, N1, N2, N3] = mediate5[N0, N1, N2, N3].call(`max`, [input3[N0, N1, N2, N3]]);\", input_dict={ \"input0\" : { \"dtype\" : \"float16\", \"shape\" : [16, 1, 512, 512]} ,  \"input1\" : { \"dtype\" : \"float16\", \"shape\" : [1]} ,  \"input2\" : { \"dtype\" : \"float16\", \"shape\" : [16, 64, 512, 512]} ,  \"input3\" : { \"dtype\" : \"float16\", \"shape\" : [16, 64, 512, 512]} }) ## @:  ",
    "Reshape_Broadcast_Divide_Reshape_Broadcast_Add_Maximum",
    [
      [
        202,
        0
      ],
      [
        21,
        0
      ],
      [
        92,
        0
      ],
      [
        107,
        0
      ]
    ]
  ],
  [
    169,
    " - einstein_v2(\" output0[N0, N1, N2] >=! input0[N0, N1, N2, N3]; \", input_dict={ \"input0\" : { \"dtype\" : \"float16\", \"shape\" : [16, 64, 512, 512]} })  ",
    "SoftmaxBasic",
    [
      [
        195,
        0
      ]
    ]
  ],
  [
    170,
    " - einstein_v2(\" output0[N0, N1, N2, N3] = (input0[N0, N1, N2, N3] - input1[N0, N1, N2]).call(`exp`); \", input_dict={ \"input0\" : { \"dtype\" : \"float16\", \"shape\" : [16, 64, 512, 512]} ,  \"input1\" : { \"dtype\" : \"float16\", \"shape\" : [16, 64, 512]} })  ",
    "SoftmaxBasic",
    [
      [
        195,
        0
      ],
      [
        169,
        0
      ]
    ]
  ],
  [
    171,
    " - einstein_v2(\" output0[N0, N1, N2] +=! input0[N0, N1, N2, N3]; \", input_dict={ \"input0\" : { \"dtype\" : \"float16\", \"shape\" : [16, 64, 512, 512]} })  ",
    "SoftmaxBasic",
    [
      [
        170,
        0
      ]
    ]
  ],
  [
    191,
    " - einstein_v2(\" mediate0[N0, N1, N2, N3] = input0[N0, N1, N2, N3] / input1[N0, N1, N2];  mediate1[N0, N1, N2, N3] = mediate0[N0, N1, N2, N3] ;   output0[N0, N1, N2, N3] = mediate1[N0, N1, N2, N3] ;  \", input_dict={ \"input0\" : { \"dtype\" : \"float16\", \"shape\" : [16, 64, 512, 512]} ,  \"input1\" : { \"dtype\" : \"float16\", \"shape\" : [16, 64, 512]} }) ## @:  ",
    "Reshape_Broadcast_SoftmaxBasic",
    [
      [
        170,
        0
      ],
      [
        171,
        0
      ]
    ]
  ],
  [
    117,
    " - einstein_v2(\" output0[B0, B1, N, M] +=! input0[B0, B1, N, K] * input1[B0, B1, K, M]; \", input_dict={ \"input0\" : { \"dtype\" : \"float16\", \"shape\" : [16, 64, 512, 512]} ,  \"input1\" : { \"dtype\" : \"float16\", \"shape\" : [16, 64, 512, 128]} }) ## @: tensorCoreConfig=(2, 3) |skip",
    "BatchMatMul",
    [
      [
        191,
        0
      ],
      [
        203,
        1
      ]
    ]
  ],
  [
    194,
    " - einstein_v2(\" mediate0[N0, N1, N2, N3] = input0[N0, N1, N2, N3] ;   mediate1[N0, N2, N1, N3] = mediate0[N0, N1, N2, N3] ;  output0[N0, N1, N2] = mediate1[N0, N1, N2 / 128 % 64, N2 / 1 % 128] where N2 in 8192;  \", input_dict={ \"input0\" : { \"dtype\" : \"float16\", \"shape\" : [16, 64, 512, 128]} }) ## @:  ",
    "Reshape_Reshape_Reshape",
    [
      [
        117,
        0
      ]
    ]
  ],
  [
    179,
    " - einstein_v2(\" mediate0[N0, N1] = input0[N0 // 512 , N0 % 512, N1] where N0 in 8192;output0[N0, N1, N2, N3] = mediate0[(N0 * 16 + N2) // 16 * 16 + (N0 * 16 + N2)  % 8 * 2 + (N1 * 16 + N3) % 16 // 8, (N1 * 16 + N3) // 16 * 16 + (N0 * 16 + N2)  % 16 // 8 * 8 + (N1 * 16 + N3) % 8] where N0 in 512, N1 in 512, N2 in 16, N3 in 16;\", input_dict={ \"input0\" : { \"dtype\" : \"float16\", \"shape\" : [16, 512, 8192]} })  ",
    "Permutate",
    [
      [
        194,
        0
      ]
    ]
  ],
  [
    180,
    " - einstein_v2(\" temp0[M, K] +=! input0[M//1024%16, M//2%512, K] where M in 16384; output0[M, N] +=! temp0[M, K] * input1[K, N]; \", input_dict={ \"input0\" : { \"dtype\" : \"float16\", \"shape\" : [16, 512, 8192]} ,  \"input1\" : { \"dtype\" : \"float16\", \"shape\" : [8192, 8192]} }) ## @: output_layout=0 |skip",
    "LayoutDot",
    [
      [
        179,
        0
      ],
      [
        23,
        0
      ]
    ]
  ],
  [
    206,
    " - einstein_v2(\" mediate0[N0, N1, N2] = input0[0] where N0 in 16, N1 in 512, N2 in 8192;  output0[N0, N1, N2] = input1[N0, N1, N2] + input2[N0, N1, N2]; output1[N0, N1, N2] = output0[N0, N1, N2].cast(`float32`);output2[N0, N1, N2] = output1[N0, N1, N2].call(`pow`, [mediate0[N0, N1, N2]]);\", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [1]} ,  \"input1\" : { \"dtype\" : \"float16\", \"shape\" : [16, 512, 8192]} ,  \"input2\" : { \"dtype\" : \"float16\", \"shape\" : [16, 512, 8192]} }, extra_outputs=[\"output0\", \"output1\", \"output2\"]) ## @:  ",
    "Add_Convert_Broadcast_Power",
    [
      [
        19,
        0
      ],
      [
        204,
        0
      ],
      [
        180,
        0
      ]
    ]
  ],
  [
    189,
    " - einstein_v2(\" mediate0[N0, N1] = input0[0] where N0 in 16, N1 in 512; mediate1[N0, N1] +=! input1[N0, N1, N2];output0[N0, N1] = mediate1[N0, N1] / mediate0[N0, N1];\", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [1]} ,  \"input1\" : { \"dtype\" : \"float32\", \"shape\" : [16, 512, 8192]} }) ## @:  ",
    "Sum_Broadcast_Divide",
    [
      [
        127,
        0
      ],
      [
        206,
        2
      ]
    ]
  ],
  [
    190,
    " - einstein_v2(\" mediate0[N0, N1, N2] = input0[N2] where N0 in 16, N1 in 512;  mediate1[N0] = input1[0] where N0 in 1;   mediate2[N0, N1, N2] = mediate1[N2] where N0 in 16, N1 in 512;  mediate3[N0, N1, N2] = input2[N0, N1] where N2 in 1;   mediate4[N0, N1, N2] = mediate3[N0, N1, N2] + mediate2[N0, N1, N2]; mediate5[N0, N1, N2] = mediate4[N0, N1, N2].call(`sqrt`); mediate6[N0, N1] = mediate5[N0, N1, 0] ;   mediate7[N0, N1, N2] = mediate6[N0, N1] where N2 in 8192; mediate8[N0, N1, N2] = input3[N0, N1, N2] / mediate7[N0, N1, N2];mediate9[N0, N1, N2] = mediate8[N0, N1, N2].cast(`float16`);output0[N0, N1, N2] = mediate0[N0, N1, N2] * mediate9[N0, N1, N2];\", input_dict={ \"input0\" : { \"dtype\" : \"float16\", \"shape\" : [8192]} ,  \"input1\" : { \"dtype\" : \"float32\", \"shape\" : [1]} ,  \"input2\" : { \"dtype\" : \"float32\", \"shape\" : [16, 512]} ,  \"input3\" : { \"dtype\" : \"float32\", \"shape\" : [16, 512, 8192]} }) ## @:  ",
    "Reshape_Reshape_Broadcast_Add_Sqrt_Reshape_Broadcast_Divide_Convert_Broadcast_Multiply",
    [
      [
        2,
        0
      ],
      [
        5,
        0
      ],
      [
        189,
        0
      ],
      [
        206,
        1
      ]
    ]
  ],
  [
    181,
    " - einstein_v2(\" mediate0[N0, N1] = input0[N0 // 512 , N0 % 512, N1] where N0 in 8192;output0[N0, N1, N2, N3] = mediate0[(N0 * 16 + N2) // 16 * 16 + (N0 * 16 + N2)  % 8 * 2 + (N1 * 16 + N3) % 16 // 8, (N1 * 16 + N3) // 16 * 16 + (N0 * 16 + N2)  % 16 // 8 * 8 + (N1 * 16 + N3) % 8] where N0 in 512, N1 in 512, N2 in 16, N3 in 16;\", input_dict={ \"input0\" : { \"dtype\" : \"float16\", \"shape\" : [16, 512, 8192]} })  ",
    "Permutate",
    [
      [
        190,
        0
      ]
    ]
  ],
  [
    182,
    " - einstein_v2(\" temp0[M, K] +=! input0[M//1024%16, M//2%512, K] where M in 16384; output0[M, N] +=! temp0[M, K] * input1[K, N]; \", input_dict={ \"input0\" : { \"dtype\" : \"float16\", \"shape\" : [16, 512, 8192]} ,  \"input1\" : { \"dtype\" : \"float16\", \"shape\" : [8192, 22016]} }) ## @: output_layout=0 |skip",
    "LayoutDot",
    [
      [
        181,
        0
      ],
      [
        25,
        0
      ]
    ]
  ],
  [
    183,
    " - einstein_v2(\" mediate0[N0, N1] = input0[N0 // 512 , N0 % 512, N1] where N0 in 8192;output0[N0, N1, N2, N3] = mediate0[(N0 * 16 + N2) // 16 * 16 + (N0 * 16 + N2)  % 8 * 2 + (N1 * 16 + N3) % 16 // 8, (N1 * 16 + N3) // 16 * 16 + (N0 * 16 + N2)  % 16 // 8 * 8 + (N1 * 16 + N3) % 8] where N0 in 512, N1 in 512, N2 in 16, N3 in 16;\", input_dict={ \"input0\" : { \"dtype\" : \"float16\", \"shape\" : [16, 512, 8192]} })  ",
    "Permutate",
    [
      [
        190,
        0
      ]
    ]
  ],
  [
    184,
    " - einstein_v2(\" temp0[M, K] +=! input0[M//1024%16, M//2%512, K] where M in 16384; output0[M, N] +=! temp0[M, K] * input1[K, N]; \", input_dict={ \"input0\" : { \"dtype\" : \"float16\", \"shape\" : [16, 512, 8192]} ,  \"input1\" : { \"dtype\" : \"float16\", \"shape\" : [8192, 22016]} }) ## @: output_layout=0 |skip",
    "LayoutDot",
    [
      [
        183,
        0
      ],
      [
        24,
        0
      ]
    ]
  ],
  [
    188,
    " - einstein_v2(\"mediate0[N0, N1, N2] = const(1).cast(input1[N0, N1, N2].dtype()) / (const(1).cast(input1[N0, N1, N2].dtype()) + (-input1[N0, N1, N2]).call(`exp`));mediate1[N0, N1, N2] = input1[N0, N1, N2] * mediate0[N0, N1, N2];output0[N0, N1, N2] = mediate1[N0, N1, N2] * input2[N0, N1, N2];\", input_dict={ \"input1\" : { \"dtype\" : \"float16\", \"shape\" : [16, 512, 22016]} ,  \"input2\" : { \"dtype\" : \"float16\", \"shape\" : [16, 512, 22016]} }) ## @:  ",
    "Sigmoid_Multiply_Multiply",
    [
      [
        184,
        0
      ],
      [
        184,
        0
      ],
      [
        182,
        0
      ]
    ]
  ],
  [
    185,
    " - einstein_v2(\" mediate0[N0, N1] = input0[N0 // 512 , N0 % 512, N1] where N0 in 8192;output0[N0, N1, N2, N3] = mediate0[(N0 * 16 + N2) // 16 * 16 + (N0 * 16 + N2)  % 8 * 2 + (N1 * 16 + N3) % 16 // 8, (N1 * 16 + N3) // 16 * 16 + (N0 * 16 + N2)  % 16 // 8 * 8 + (N1 * 16 + N3) % 8] where N0 in 512, N1 in 1376, N2 in 16, N3 in 16;\", input_dict={ \"input0\" : { \"dtype\" : \"float16\", \"shape\" : [16, 512, 22016]} })  ",
    "Permutate",
    [
      [
        188,
        0
      ]
    ]
  ],
  [
    186,
    " - einstein_v2(\" temp0[M, K] +=! input0[M//1024%16, M//2%512, K] where M in 16384; output0[M, N] +=! temp0[M, K] * input1[K, N]; \", input_dict={ \"input0\" : { \"dtype\" : \"float16\", \"shape\" : [16, 512, 22016]} ,  \"input1\" : { \"dtype\" : \"float16\", \"shape\" : [22016, 8192]} }) ## @: output_layout=0 |skip",
    "LayoutDot",
    [
      [
        185,
        0
      ],
      [
        26,
        0
      ]
    ]
  ],
  [
    207,
    " - einstein_v2(\" mediate0[N0, N1, N2] = input0[0] where N0 in 16, N1 in 512, N2 in 8192;  mediate1[N0, N1, N2] = input1[N0, N1, N2] + input2[N0, N1, N2]; output0[N0, N1, N2] = mediate1[N0, N1, N2].cast(`float32`);output1[N0, N1, N2] = output0[N0, N1, N2].call(`pow`, [mediate0[N0, N1, N2]]);\", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [1]} ,  \"input1\" : { \"dtype\" : \"float16\", \"shape\" : [16, 512, 8192]} ,  \"input2\" : { \"dtype\" : \"float16\", \"shape\" : [16, 512, 8192]} }, extra_outputs=[\"output0\", \"output1\"]) ## @:  ",
    "Add_Convert_Broadcast_Power",
    [
      [
        19,
        0
      ],
      [
        206,
        0
      ],
      [
        186,
        0
      ]
    ]
  ],
  [
    187,
    " - einstein_v2(\" mediate0[N0, N1] = input0[0] where N0 in 16, N1 in 512; mediate1[N0, N1] +=! input1[N0, N1, N2];output0[N0, N1] = mediate1[N0, N1] / mediate0[N0, N1];\", input_dict={ \"input0\" : { \"dtype\" : \"float32\", \"shape\" : [1]} ,  \"input1\" : { \"dtype\" : \"float32\", \"shape\" : [16, 512, 8192]} }) ## @:  ",
    "Sum_Broadcast_Divide",
    [
      [
        152,
        0
      ],
      [
        207,
        1
      ]
    ]
  ],
  [
    209,
    " - einstein_v2(\" mediate0[N0, N1, N2] = input0[N2] where N0 in 16, N1 in 512;  mediate1[N0] = input1[0] where N0 in 1;   mediate2[N0, N1, N2] = mediate1[N2] where N0 in 16, N1 in 512;  mediate3[N0, N1, N2] = input2[N0, N1] where N2 in 1;   mediate4[N0, N1, N2] = mediate3[N0, N1, N2] + mediate2[N0, N1, N2]; mediate5[N0, N1, N2] = mediate4[N0, N1, N2].call(`sqrt`); mediate6[N0, N1] = mediate5[N0, N1, 0] ;   mediate7[N0, N1, N2] = mediate6[N0, N1] where N2 in 8192; mediate8[N0, N1, N2] = input3[N0, N1, N2] / mediate7[N0, N1, N2];mediate9[N0, N1, N2] = mediate8[N0, N1, N2].cast(`float16`);output0[N0, N1, N2] = mediate0[N0, N1, N2] * mediate9[N0, N1, N2];\", input_dict={ \"input0\" : { \"dtype\" : \"float16\", \"shape\" : [8192]} ,  \"input1\" : { \"dtype\" : \"float32\", \"shape\" : [1]} ,  \"input2\" : { \"dtype\" : \"float32\", \"shape\" : [16, 512]} ,  \"input3\" : { \"dtype\" : \"float32\", \"shape\" : [16, 512, 8192]} }) ## @:  ",
    "Reshape_Reshape_Broadcast_Add_Sqrt_Reshape_Broadcast_Divide_Convert_Broadcast_Multiply",
    [
      [
        3,
        0
      ],
      [
        5,
        0
      ],
      [
        187,
        0
      ],
      [
        207,
        0
      ]
    ]
  ],
  [
    166,
    "",
    "Result",
    [
      [
        209,
        0
      ]
    ]
  ]
]