[{"tvm_func_name": "tuned_dot_nn_op_float_m4_k256_n256_kernel0", "op_type": "Dot", "parameters": {"arg0_shape": [4, 256], "arg1_shape": [256, 256], "out_shape": [4, 256], "transpose_A": false, "transpose_B": false}, "code": "extern \"C\" __global__ void tuned_dot_nn_op_float_m4_k256_n256_kernel0( float* __restrict__ A,  float* __restrict__ B,  float* __restrict__ C) {\n   float C_local[1];\n  __shared__ float A_shared[256];\n  __shared__ float B_shared[512];\n   float A_shared_local[32];\n   float B_shared_local[32];\n   float A_shared_local1[32];\n   float B_shared_local1[32];\n  C_local[0] = 0.000000e+00f;\n  ((__shared__ float4*)(A_shared + ((((int)threadIdx.y) * 32) + (((int)threadIdx.x) * 4))))[0] = (( float4*)(A + ((((int)threadIdx.y) * 256) + (((int)threadIdx.x) * 4))))[0];\n  for (int ax0_ax1_fused_inner_inner_outer = 0; ax0_ax1_fused_inner_inner_outer < 2; ++ax0_ax1_fused_inner_inner_outer) {\n    ((__shared__ float4*)(B_shared + (((((int)threadIdx.y) * 64) + (((int)threadIdx.x) * 8)) + (ax0_ax1_fused_inner_inner_outer * 4))))[0] = (( float4*)(B + ((((((int)threadIdx.y) * 2048) + (((int)threadIdx.x) * 256)) + (((int)blockIdx.x) * 8)) + (ax0_ax1_fused_inner_inner_outer * 4))))[0];\n  }\n  for (int k_outer_outer = 0; k_outer_outer < 7; ++k_outer_outer) {\n    __syncthreads();\n    ((__shared__ float4*)(A_shared + (((((k_outer_outer + 1) & 1) * 128) + (((int)threadIdx.y) * 32)) + (((int)threadIdx.x) * 4))))[0] = (( float4*)(A + ((((((int)threadIdx.y) * 256) + (k_outer_outer * 32)) + (((int)threadIdx.x) * 4)) + 32)))[0];\n    for (int ax0_ax1_fused_inner_inner_outer1 = 0; ax0_ax1_fused_inner_inner_outer1 < 2; ++ax0_ax1_fused_inner_inner_outer1) {\n      ((__shared__ float4*)(B_shared + ((((((k_outer_outer + 1) & 1) * 256) + (((int)threadIdx.y) * 64)) + (((int)threadIdx.x) * 8)) + (ax0_ax1_fused_inner_inner_outer1 * 4))))[0] = (( float4*)(B + ((((((k_outer_outer * 8192) + (((int)threadIdx.y) * 2048)) + (((int)threadIdx.x) * 256)) + (((int)blockIdx.x) * 8)) + (ax0_ax1_fused_inner_inner_outer1 * 4)) + 8192)))[0];\n    }\n    for (int ax1 = 0; ax1 < 16; ++ax1) {\n      A_shared_local[ax1] = A_shared[((((k_outer_outer & 1) * 128) + (((int)threadIdx.y) * 32)) + ax1)];\n    }\n    for (int ax0 = 0; ax0 < 16; ++ax0) {\n      B_shared_local[ax0] = B_shared[((((k_outer_outer & 1) * 256) + (ax0 * 8)) + ((int)threadIdx.x))];\n    }\n    for (int ax11 = 0; ax11 < 16; ++ax11) {\n      A_shared_local[(ax11 + 16)] = A_shared[(((((k_outer_outer & 1) * 128) + (((int)threadIdx.y) * 32)) + ax11) + 16)];\n    }\n    for (int ax01 = 0; ax01 < 16; ++ax01) {\n      B_shared_local[(ax01 + 16)] = B_shared[(((((k_outer_outer & 1) * 256) + (ax01 * 8)) + ((int)threadIdx.x)) + 128)];\n    }\n    for (int k_inner_inner = 0; k_inner_inner < 16; ++k_inner_inner) {\n      C_local[0] = (C_local[0] + (A_shared_local[k_inner_inner] * B_shared_local[k_inner_inner]));\n    }\n    for (int k_inner_inner1 = 0; k_inner_inner1 < 16; ++k_inner_inner1) {\n      C_local[0] = (C_local[0] + (A_shared_local[(k_inner_inner1 + 16)] * B_shared_local[(k_inner_inner1 + 16)]));\n    }\n  }\n  __syncthreads();\n  for (int ax12 = 0; ax12 < 16; ++ax12) {\n    A_shared_local1[ax12] = A_shared[(((((int)threadIdx.y) * 32) + ax12) + 128)];\n  }\n  for (int ax02 = 0; ax02 < 16; ++ax02) {\n    B_shared_local1[ax02] = B_shared[(((ax02 * 8) + ((int)threadIdx.x)) + 256)];\n  }\n  for (int ax13 = 0; ax13 < 16; ++ax13) {\n    A_shared_local1[(ax13 + 16)] = A_shared[(((((int)threadIdx.y) * 32) + ax13) + 144)];\n  }\n  for (int ax03 = 0; ax03 < 16; ++ax03) {\n    B_shared_local1[(ax03 + 16)] = B_shared[(((ax03 * 8) + ((int)threadIdx.x)) + 384)];\n  }\n  for (int k_inner_inner2 = 0; k_inner_inner2 < 16; ++k_inner_inner2) {\n    C_local[0] = (C_local[0] + (A_shared_local1[k_inner_inner2] * B_shared_local1[k_inner_inner2]));\n  }\n  for (int k_inner_inner3 = 0; k_inner_inner3 < 16; ++k_inner_inner3) {\n    C_local[0] = (C_local[0] + (A_shared_local1[(k_inner_inner3 + 16)] * B_shared_local1[(k_inner_inner3 + 16)]));\n  }\n  C[(((((int)threadIdx.y) * 256) + (((int)blockIdx.x) * 8)) + ((int)threadIdx.x))] = C_local[0];\n}\n\n", "gridDim": [32, 1, 1], "blockDim": [8, 4, 1]}, {"tvm_func_name": "tuned_dot_nn_op_float_m16_k256_n256_kernel0", "op_type": "Dot", "parameters": {"arg0_shape": [16, 256], "arg1_shape": [256, 256], "out_shape": [16, 256], "transpose_A": false, "transpose_B": false}, "code": "extern \"C\" __global__ void tuned_dot_nn_op_float_m16_k256_n256_kernel0( float* __restrict__ A,  float* __restrict__ B,  float* __restrict__ C) {\n   float C_local[2];\n  __shared__ float A_shared[512];\n  __shared__ float B_shared[256];\n   float A_shared_local[2];\n   float B_shared_local[4];\n   float A_shared_local1[2];\n   float B_shared_local1[4];\n  for (int j_c_init = 0; j_c_init < 2; ++j_c_init) {\n    C_local[j_c_init] = 0.000000e+00f;\n  }\n  ((__shared__ float4*)(A_shared + ((((int)threadIdx.y) * 16) + (((int)threadIdx.x) * 4))))[0] = (( float4*)(A + ((((int)threadIdx.y) * 256) + (((int)threadIdx.x) * 4))))[0];\n  for (int ax0_ax1_fused_inner_inner_inner_s = 0; ax0_ax1_fused_inner_inner_inner_s < 4; ++ax0_ax1_fused_inner_inner_inner_s) {\n    if (((((((int)threadIdx.x) * 2) + ax0_ax1_fused_inner_inner_inner_s) >> 3) + ((int)threadIdx.y)) < 16) {\n      if ((((((int)threadIdx.y) * 8) + (((int)threadIdx.x) * 2)) + ax0_ax1_fused_inner_inner_inner_s) < 128) {\n        if (((((int)threadIdx.x) * 2) + ax0_ax1_fused_inner_inner_inner_s) < 8) {\n          if (ax0_ax1_fused_inner_inner_inner_s < 2) {\n            B_shared[(((((int)threadIdx.y) * 8) + (((int)threadIdx.x) * 2)) + ax0_ax1_fused_inner_inner_inner_s)] = B[((((((int)threadIdx.y) * 256) + (((int)blockIdx.x) * 8)) + (((int)threadIdx.x) * 2)) + ax0_ax1_fused_inner_inner_inner_s)];\n          }\n        }\n      }\n    }\n  }\n  for (int k_outer_outer = 0; k_outer_outer < 15; ++k_outer_outer) {\n    __syncthreads();\n    ((__shared__ float4*)(A_shared + (((((k_outer_outer + 1) & 1) * 256) + (((int)threadIdx.y) * 16)) + (((int)threadIdx.x) * 4))))[0] = (( float4*)(A + ((((((int)threadIdx.y) * 256) + (k_outer_outer * 16)) + (((int)threadIdx.x) * 4)) + 16)))[0];\n    for (int ax0_ax1_fused_inner_inner_inner_s1 = 0; ax0_ax1_fused_inner_inner_inner_s1 < 4; ++ax0_ax1_fused_inner_inner_inner_s1) {\n      if (((((((int)threadIdx.x) * 2) + ax0_ax1_fused_inner_inner_inner_s1) >> 3) + ((int)threadIdx.y)) < 16) {\n        if ((((((int)threadIdx.y) * 8) + (((int)threadIdx.x) * 2)) + ax0_ax1_fused_inner_inner_inner_s1) < 128) {\n          if (((((int)threadIdx.x) * 2) + ax0_ax1_fused_inner_inner_inner_s1) < 8) {\n            if (ax0_ax1_fused_inner_inner_inner_s1 < 2) {\n              B_shared[((((((k_outer_outer + 1) & 1) * 128) + (((int)threadIdx.y) * 8)) + (((int)threadIdx.x) * 2)) + ax0_ax1_fused_inner_inner_inner_s1)] = B[((((((k_outer_outer * 4096) + (((int)threadIdx.y) * 256)) + (((int)blockIdx.x) * 8)) + (((int)threadIdx.x) * 2)) + ax0_ax1_fused_inner_inner_inner_s1) + 4096)];\n            }\n          }\n        }\n      }\n    }\n    A_shared_local[0] = A_shared[(((k_outer_outer & 1) * 256) + (((int)threadIdx.y) * 16))];\n    for (int ax1 = 0; ax1 < 2; ++ax1) {\n      B_shared_local[ax1] = B_shared[((((k_outer_outer & 1) * 128) + (((int)threadIdx.x) * 2)) + ax1)];\n    }\n    A_shared_local[1] = A_shared[((((k_outer_outer & 1) * 256) + (((int)threadIdx.y) * 16)) + 1)];\n    for (int ax11 = 0; ax11 < 2; ++ax11) {\n      B_shared_local[(ax11 + 2)] = B_shared[(((((k_outer_outer & 1) * 128) + (((int)threadIdx.x) * 2)) + ax11) + 8)];\n    }\n    for (int j_c = 0; j_c < 2; ++j_c) {\n      C_local[j_c] = (C_local[j_c] + (A_shared_local[0] * B_shared_local[j_c]));\n    }\n    A_shared_local[0] = A_shared[((((k_outer_outer & 1) * 256) + (((int)threadIdx.y) * 16)) + 2)];\n    for (int ax12 = 0; ax12 < 2; ++ax12) {\n      B_shared_local[ax12] = B_shared[(((((k_outer_outer & 1) * 128) + (((int)threadIdx.x) * 2)) + ax12) + 16)];\n    }\n    for (int j_c1 = 0; j_c1 < 2; ++j_c1) {\n      C_local[j_c1] = (C_local[j_c1] + (A_shared_local[1] * B_shared_local[(j_c1 + 2)]));\n    }\n    A_shared_local[1] = A_shared[((((k_outer_outer & 1) * 256) + (((int)threadIdx.y) * 16)) + 3)];\n    for (int ax13 = 0; ax13 < 2; ++ax13) {\n      B_shared_local[(ax13 + 2)] = B_shared[(((((k_outer_outer & 1) * 128) + (((int)threadIdx.x) * 2)) + ax13) + 24)];\n    }\n    for (int j_c2 = 0; j_c2 < 2; ++j_c2) {\n      C_local[j_c2] = (C_local[j_c2] + (A_shared_local[0] * B_shared_local[j_c2]));\n    }\n    A_shared_local[0] = A_shared[((((k_outer_outer & 1) * 256) + (((int)threadIdx.y) * 16)) + 4)];\n    for (int ax14 = 0; ax14 < 2; ++ax14) {\n      B_shared_local[ax14] = B_shared[(((((k_outer_outer & 1) * 128) + (((int)threadIdx.x) * 2)) + ax14) + 32)];\n    }\n    for (int j_c3 = 0; j_c3 < 2; ++j_c3) {\n      C_local[j_c3] = (C_local[j_c3] + (A_shared_local[1] * B_shared_local[(j_c3 + 2)]));\n    }\n    A_shared_local[1] = A_shared[((((k_outer_outer & 1) * 256) + (((int)threadIdx.y) * 16)) + 5)];\n    for (int ax15 = 0; ax15 < 2; ++ax15) {\n      B_shared_local[(ax15 + 2)] = B_shared[(((((k_outer_outer & 1) * 128) + (((int)threadIdx.x) * 2)) + ax15) + 40)];\n    }\n    for (int j_c4 = 0; j_c4 < 2; ++j_c4) {\n      C_local[j_c4] = (C_local[j_c4] + (A_shared_local[0] * B_shared_local[j_c4]));\n    }\n    A_shared_local[0] = A_shared[((((k_outer_outer & 1) * 256) + (((int)threadIdx.y) * 16)) + 6)];\n    for (int ax16 = 0; ax16 < 2; ++ax16) {\n      B_shared_local[ax16] = B_shared[(((((k_outer_outer & 1) * 128) + (((int)threadIdx.x) * 2)) + ax16) + 48)];\n    }\n    for (int j_c5 = 0; j_c5 < 2; ++j_c5) {\n      C_local[j_c5] = (C_local[j_c5] + (A_shared_local[1] * B_shared_local[(j_c5 + 2)]));\n    }\n    A_shared_local[1] = A_shared[((((k_outer_outer & 1) * 256) + (((int)threadIdx.y) * 16)) + 7)];\n    for (int ax17 = 0; ax17 < 2; ++ax17) {\n      B_shared_local[(ax17 + 2)] = B_shared[(((((k_outer_outer & 1) * 128) + (((int)threadIdx.x) * 2)) + ax17) + 56)];\n    }\n    for (int j_c6 = 0; j_c6 < 2; ++j_c6) {\n      C_local[j_c6] = (C_local[j_c6] + (A_shared_local[0] * B_shared_local[j_c6]));\n    }\n    A_shared_local[0] = A_shared[((((k_outer_outer & 1) * 256) + (((int)threadIdx.y) * 16)) + 8)];\n    for (int ax18 = 0; ax18 < 2; ++ax18) {\n      B_shared_local[ax18] = B_shared[(((((k_outer_outer & 1) * 128) + (((int)threadIdx.x) * 2)) + ax18) + 64)];\n    }\n    for (int j_c7 = 0; j_c7 < 2; ++j_c7) {\n      C_local[j_c7] = (C_local[j_c7] + (A_shared_local[1] * B_shared_local[(j_c7 + 2)]));\n    }\n    A_shared_local[1] = A_shared[((((k_outer_outer & 1) * 256) + (((int)threadIdx.y) * 16)) + 9)];\n    for (int ax19 = 0; ax19 < 2; ++ax19) {\n      B_shared_local[(ax19 + 2)] = B_shared[(((((k_outer_outer & 1) * 128) + (((int)threadIdx.x) * 2)) + ax19) + 72)];\n    }\n    for (int j_c8 = 0; j_c8 < 2; ++j_c8) {\n      C_local[j_c8] = (C_local[j_c8] + (A_shared_local[0] * B_shared_local[j_c8]));\n    }\n    A_shared_local[0] = A_shared[((((k_outer_outer & 1) * 256) + (((int)threadIdx.y) * 16)) + 10)];\n    for (int ax110 = 0; ax110 < 2; ++ax110) {\n      B_shared_local[ax110] = B_shared[(((((k_outer_outer & 1) * 128) + (((int)threadIdx.x) * 2)) + ax110) + 80)];\n    }\n    for (int j_c9 = 0; j_c9 < 2; ++j_c9) {\n      C_local[j_c9] = (C_local[j_c9] + (A_shared_local[1] * B_shared_local[(j_c9 + 2)]));\n    }\n    A_shared_local[1] = A_shared[((((k_outer_outer & 1) * 256) + (((int)threadIdx.y) * 16)) + 11)];\n    for (int ax111 = 0; ax111 < 2; ++ax111) {\n      B_shared_local[(ax111 + 2)] = B_shared[(((((k_outer_outer & 1) * 128) + (((int)threadIdx.x) * 2)) + ax111) + 88)];\n    }\n    for (int j_c10 = 0; j_c10 < 2; ++j_c10) {\n      C_local[j_c10] = (C_local[j_c10] + (A_shared_local[0] * B_shared_local[j_c10]));\n    }\n    A_shared_local[0] = A_shared[((((k_outer_outer & 1) * 256) + (((int)threadIdx.y) * 16)) + 12)];\n    for (int ax112 = 0; ax112 < 2; ++ax112) {\n      B_shared_local[ax112] = B_shared[(((((k_outer_outer & 1) * 128) + (((int)threadIdx.x) * 2)) + ax112) + 96)];\n    }\n    for (int j_c11 = 0; j_c11 < 2; ++j_c11) {\n      C_local[j_c11] = (C_local[j_c11] + (A_shared_local[1] * B_shared_local[(j_c11 + 2)]));\n    }\n    A_shared_local[1] = A_shared[((((k_outer_outer & 1) * 256) + (((int)threadIdx.y) * 16)) + 13)];\n    for (int ax113 = 0; ax113 < 2; ++ax113) {\n      B_shared_local[(ax113 + 2)] = B_shared[(((((k_outer_outer & 1) * 128) + (((int)threadIdx.x) * 2)) + ax113) + 104)];\n    }\n    for (int j_c12 = 0; j_c12 < 2; ++j_c12) {\n      C_local[j_c12] = (C_local[j_c12] + (A_shared_local[0] * B_shared_local[j_c12]));\n    }\n    A_shared_local[0] = A_shared[((((k_outer_outer & 1) * 256) + (((int)threadIdx.y) * 16)) + 14)];\n    for (int ax114 = 0; ax114 < 2; ++ax114) {\n      B_shared_local[ax114] = B_shared[(((((k_outer_outer & 1) * 128) + (((int)threadIdx.x) * 2)) + ax114) + 112)];\n    }\n    for (int j_c13 = 0; j_c13 < 2; ++j_c13) {\n      C_local[j_c13] = (C_local[j_c13] + (A_shared_local[1] * B_shared_local[(j_c13 + 2)]));\n    }\n    A_shared_local[1] = A_shared[((((k_outer_outer & 1) * 256) + (((int)threadIdx.y) * 16)) + 15)];\n    for (int ax115 = 0; ax115 < 2; ++ax115) {\n      B_shared_local[(ax115 + 2)] = B_shared[(((((k_outer_outer & 1) * 128) + (((int)threadIdx.x) * 2)) + ax115) + 120)];\n    }\n    for (int j_c14 = 0; j_c14 < 2; ++j_c14) {\n      C_local[j_c14] = (C_local[j_c14] + (A_shared_local[0] * B_shared_local[j_c14]));\n    }\n    for (int j_c15 = 0; j_c15 < 2; ++j_c15) {\n      C_local[j_c15] = (C_local[j_c15] + (A_shared_local[1] * B_shared_local[(j_c15 + 2)]));\n    }\n  }\n  __syncthreads();\n  A_shared_local1[0] = A_shared[((((int)threadIdx.y) * 16) + 256)];\n  for (int ax116 = 0; ax116 < 2; ++ax116) {\n    B_shared_local1[ax116] = B_shared[(((((int)threadIdx.x) * 2) + ax116) + 128)];\n  }\n  A_shared_local1[1] = A_shared[((((int)threadIdx.y) * 16) + 257)];\n  for (int ax117 = 0; ax117 < 2; ++ax117) {\n    B_shared_local1[(ax117 + 2)] = B_shared[(((((int)threadIdx.x) * 2) + ax117) + 136)];\n  }\n  for (int j_c16 = 0; j_c16 < 2; ++j_c16) {\n    C_local[j_c16] = (C_local[j_c16] + (A_shared_local1[0] * B_shared_local1[j_c16]));\n  }\n  A_shared_local1[0] = A_shared[((((int)threadIdx.y) * 16) + 258)];\n  for (int ax118 = 0; ax118 < 2; ++ax118) {\n    B_shared_local1[ax118] = B_shared[(((((int)threadIdx.x) * 2) + ax118) + 144)];\n  }\n  for (int j_c17 = 0; j_c17 < 2; ++j_c17) {\n    C_local[j_c17] = (C_local[j_c17] + (A_shared_local1[1] * B_shared_local1[(j_c17 + 2)]));\n  }\n  A_shared_local1[1] = A_shared[((((int)threadIdx.y) * 16) + 259)];\n  for (int ax119 = 0; ax119 < 2; ++ax119) {\n    B_shared_local1[(ax119 + 2)] = B_shared[(((((int)threadIdx.x) * 2) + ax119) + 152)];\n  }\n  for (int j_c18 = 0; j_c18 < 2; ++j_c18) {\n    C_local[j_c18] = (C_local[j_c18] + (A_shared_local1[0] * B_shared_local1[j_c18]));\n  }\n  A_shared_local1[0] = A_shared[((((int)threadIdx.y) * 16) + 260)];\n  for (int ax120 = 0; ax120 < 2; ++ax120) {\n    B_shared_local1[ax120] = B_shared[(((((int)threadIdx.x) * 2) + ax120) + 160)];\n  }\n  for (int j_c19 = 0; j_c19 < 2; ++j_c19) {\n    C_local[j_c19] = (C_local[j_c19] + (A_shared_local1[1] * B_shared_local1[(j_c19 + 2)]));\n  }\n  A_shared_local1[1] = A_shared[((((int)threadIdx.y) * 16) + 261)];\n  for (int ax121 = 0; ax121 < 2; ++ax121) {\n    B_shared_local1[(ax121 + 2)] = B_shared[(((((int)threadIdx.x) * 2) + ax121) + 168)];\n  }\n  for (int j_c20 = 0; j_c20 < 2; ++j_c20) {\n    C_local[j_c20] = (C_local[j_c20] + (A_shared_local1[0] * B_shared_local1[j_c20]));\n  }\n  A_shared_local1[0] = A_shared[((((int)threadIdx.y) * 16) + 262)];\n  for (int ax122 = 0; ax122 < 2; ++ax122) {\n    B_shared_local1[ax122] = B_shared[(((((int)threadIdx.x) * 2) + ax122) + 176)];\n  }\n  for (int j_c21 = 0; j_c21 < 2; ++j_c21) {\n    C_local[j_c21] = (C_local[j_c21] + (A_shared_local1[1] * B_shared_local1[(j_c21 + 2)]));\n  }\n  A_shared_local1[1] = A_shared[((((int)threadIdx.y) * 16) + 263)];\n  for (int ax123 = 0; ax123 < 2; ++ax123) {\n    B_shared_local1[(ax123 + 2)] = B_shared[(((((int)threadIdx.x) * 2) + ax123) + 184)];\n  }\n  for (int j_c22 = 0; j_c22 < 2; ++j_c22) {\n    C_local[j_c22] = (C_local[j_c22] + (A_shared_local1[0] * B_shared_local1[j_c22]));\n  }\n  A_shared_local1[0] = A_shared[((((int)threadIdx.y) * 16) + 264)];\n  for (int ax124 = 0; ax124 < 2; ++ax124) {\n    B_shared_local1[ax124] = B_shared[(((((int)threadIdx.x) * 2) + ax124) + 192)];\n  }\n  for (int j_c23 = 0; j_c23 < 2; ++j_c23) {\n    C_local[j_c23] = (C_local[j_c23] + (A_shared_local1[1] * B_shared_local1[(j_c23 + 2)]));\n  }\n  A_shared_local1[1] = A_shared[((((int)threadIdx.y) * 16) + 265)];\n  for (int ax125 = 0; ax125 < 2; ++ax125) {\n    B_shared_local1[(ax125 + 2)] = B_shared[(((((int)threadIdx.x) * 2) + ax125) + 200)];\n  }\n  for (int j_c24 = 0; j_c24 < 2; ++j_c24) {\n    C_local[j_c24] = (C_local[j_c24] + (A_shared_local1[0] * B_shared_local1[j_c24]));\n  }\n  A_shared_local1[0] = A_shared[((((int)threadIdx.y) * 16) + 266)];\n  for (int ax126 = 0; ax126 < 2; ++ax126) {\n    B_shared_local1[ax126] = B_shared[(((((int)threadIdx.x) * 2) + ax126) + 208)];\n  }\n  for (int j_c25 = 0; j_c25 < 2; ++j_c25) {\n    C_local[j_c25] = (C_local[j_c25] + (A_shared_local1[1] * B_shared_local1[(j_c25 + 2)]));\n  }\n  A_shared_local1[1] = A_shared[((((int)threadIdx.y) * 16) + 267)];\n  for (int ax127 = 0; ax127 < 2; ++ax127) {\n    B_shared_local1[(ax127 + 2)] = B_shared[(((((int)threadIdx.x) * 2) + ax127) + 216)];\n  }\n  for (int j_c26 = 0; j_c26 < 2; ++j_c26) {\n    C_local[j_c26] = (C_local[j_c26] + (A_shared_local1[0] * B_shared_local1[j_c26]));\n  }\n  A_shared_local1[0] = A_shared[((((int)threadIdx.y) * 16) + 268)];\n  for (int ax128 = 0; ax128 < 2; ++ax128) {\n    B_shared_local1[ax128] = B_shared[(((((int)threadIdx.x) * 2) + ax128) + 224)];\n  }\n  for (int j_c27 = 0; j_c27 < 2; ++j_c27) {\n    C_local[j_c27] = (C_local[j_c27] + (A_shared_local1[1] * B_shared_local1[(j_c27 + 2)]));\n  }\n  A_shared_local1[1] = A_shared[((((int)threadIdx.y) * 16) + 269)];\n  for (int ax129 = 0; ax129 < 2; ++ax129) {\n    B_shared_local1[(ax129 + 2)] = B_shared[(((((int)threadIdx.x) * 2) + ax129) + 232)];\n  }\n  for (int j_c28 = 0; j_c28 < 2; ++j_c28) {\n    C_local[j_c28] = (C_local[j_c28] + (A_shared_local1[0] * B_shared_local1[j_c28]));\n  }\n  A_shared_local1[0] = A_shared[((((int)threadIdx.y) * 16) + 270)];\n  for (int ax130 = 0; ax130 < 2; ++ax130) {\n    B_shared_local1[ax130] = B_shared[(((((int)threadIdx.x) * 2) + ax130) + 240)];\n  }\n  for (int j_c29 = 0; j_c29 < 2; ++j_c29) {\n    C_local[j_c29] = (C_local[j_c29] + (A_shared_local1[1] * B_shared_local1[(j_c29 + 2)]));\n  }\n  A_shared_local1[1] = A_shared[((((int)threadIdx.y) * 16) + 271)];\n  for (int ax131 = 0; ax131 < 2; ++ax131) {\n    B_shared_local1[(ax131 + 2)] = B_shared[(((((int)threadIdx.x) * 2) + ax131) + 248)];\n  }\n  for (int j_c30 = 0; j_c30 < 2; ++j_c30) {\n    C_local[j_c30] = (C_local[j_c30] + (A_shared_local1[0] * B_shared_local1[j_c30]));\n  }\n  for (int j_c31 = 0; j_c31 < 2; ++j_c31) {\n    C_local[j_c31] = (C_local[j_c31] + (A_shared_local1[1] * B_shared_local1[(j_c31 + 2)]));\n  }\n  for (int j_inner_inner_inner = 0; j_inner_inner_inner < 2; ++j_inner_inner_inner) {\n    C[((((((int)threadIdx.y) * 256) + (((int)blockIdx.x) * 8)) + (((int)threadIdx.x) * 2)) + j_inner_inner_inner)] = C_local[j_inner_inner_inner];\n  }\n}\n\n", "gridDim": [32, 1, 1], "blockDim": [4, 16, 1]}]