// dim3(16, 8, 16) dim3(8, 32, 1)

   float *A = input0, *B = input1, *C = output0;
   float C_local[8];
  __shared__ float A_shared[2048];
  __shared__ float B_shared[1024];
   float A_shared_local[4];
   float B_shared_local[8];
   float A_shared_local1[4];
   float B_shared_local1[8];
  for (int j_c_init = 0; j_c_init < 2; ++j_c_init) {
    C_local[j_c_init] = 0.000000e+00f;
    C_local[(j_c_init + 4)] = 0.000000e+00f;
    C_local[(j_c_init + 2)] = 0.000000e+00f;
    C_local[(j_c_init + 6)] = 0.000000e+00f;
  }
    float4 _1;
          int4 _2 = make_int4(((((int)blockIdx.z) * 32768) + (((int)blockIdx.y) * 4096)), ((((int)blockIdx.z) * 32768) + (((int)blockIdx.y) * 4096)), ((((int)blockIdx.z) * 32768) + (((int)blockIdx.y) * 4096)), ((((int)blockIdx.z) * 32768) + (((int)blockIdx.y) * 4096)));
              int4 _3 = (make_int4)((((((int)threadIdx.y) * 32) + (((int)threadIdx.x) * 4)))+(1*0), (((((int)threadIdx.y) * 32) + (((int)threadIdx.x) * 4)))+(1*1), (((((int)threadIdx.y) * 32) + (((int)threadIdx.x) * 4)))+(1*2), (((((int)threadIdx.y) * 32) + (((int)threadIdx.x) * 4)))+(1*3));
              int4 _4 = make_int4(16, 16, 16, 16);
              int4 _5;
              _5.x = (_3.x/_4.x);
              _5.y = (_3.y/_4.y);
              _5.z = (_3.z/_4.z);
              _5.w = (_3.w/_4.w);
            int4 _6 = make_int4(64, 64, 64, 64);
            int4 _7;
            _7.x = (_5.x*_6.x);
            _7.y = (_5.y*_6.y);
            _7.z = (_5.z*_6.z);
            _7.w = (_5.w*_6.w);
          int4 _8;
          _8.x = (_2.x+_7.x);
          _8.y = (_2.y+_7.y);
          _8.z = (_2.z+_7.z);
          _8.w = (_2.w+_7.w);
        int4 _9 = make_int4(0, 0, 0, 0);
        int4 _10;
        _10.x = (_8.x+_9.x);
        _10.y = (_8.y+_9.y);
        _10.z = (_8.z+_9.z);
        _10.w = (_8.w+_9.w);
        int4 _11 = (make_int4)(((((int)threadIdx.x) * 4))+(1*0), ((((int)threadIdx.x) * 4))+(1*1), ((((int)threadIdx.x) * 4))+(1*2), ((((int)threadIdx.x) * 4))+(1*3));
        int4 _12 = make_int4(16, 16, 16, 16);
        int4 _13;
        _13.x = (_11.x%_12.x);
        _13.y = (_11.y%_12.y);
        _13.z = (_11.z%_12.z);
        _13.w = (_11.w%_12.w);
      int4 _14;
      _14.x = (_10.x+_13.x);
      _14.y = (_10.y+_13.y);
      _14.z = (_10.z+_13.z);
      _14.w = (_10.w+_13.w);
    _1.x = A[_14.x];
    _1.y = A[_14.y];
    _1.z = A[_14.z];
    _1.w = A[_14.w];
  ((__shared__ float4*)(A_shared + ((((int)threadIdx.y) * 32) + (((int)threadIdx.x) * 4))))[0] = _1;
  for (int ax0_ax1_fused_ax2_fused_inner_inner_inner_s = 0; ax0_ax1_fused_ax2_fused_inner_inner_inner_s < 4; ++ax0_ax1_fused_ax2_fused_inner_inner_inner_s) {
    if ((((((int)threadIdx.y) * 16) + (((int)threadIdx.x) * 2)) + ax0_ax1_fused_ax2_fused_inner_inner_inner_s) < 512) {
      if (((((int)threadIdx.x) * 2) + ax0_ax1_fused_ax2_fused_inner_inner_inner_s) < 16) {
        if (ax0_ax1_fused_ax2_fused_inner_inner_inner_s < 2) {
          B_shared[(((((int)threadIdx.y) * 16) + (((int)threadIdx.x) * 2)) + ax0_ax1_fused_ax2_fused_inner_inner_inner_s)] = B[((((((int)blockIdx.z) * 32768) + (((((((int)threadIdx.y) * 16) + (((int)threadIdx.x) * 2)) + ax0_ax1_fused_ax2_fused_inner_inner_inner_s) / 32) * 512)) + (((int)blockIdx.x) * 32)) + ((((((int)threadIdx.y) * 16) + (((int)threadIdx.x) * 2)) + ax0_ax1_fused_ax2_fused_inner_inner_inner_s) % 32))];
        }
      }
    }
  }
  for (int k_outer_outer = 0; k_outer_outer < 3; ++k_outer_outer) {
    __syncthreads();
      float4 _15;
            int4 _16 = make_int4(((((int)blockIdx.z) * 32768) + (((int)blockIdx.y) * 4096)), ((((int)blockIdx.z) * 32768) + (((int)blockIdx.y) * 4096)), ((((int)blockIdx.z) * 32768) + (((int)blockIdx.y) * 4096)), ((((int)blockIdx.z) * 32768) + (((int)blockIdx.y) * 4096)));
                int4 _17 = (make_int4)((((((int)threadIdx.y) * 32) + (((int)threadIdx.x) * 4)))+(1*0), (((((int)threadIdx.y) * 32) + (((int)threadIdx.x) * 4)))+(1*1), (((((int)threadIdx.y) * 32) + (((int)threadIdx.x) * 4)))+(1*2), (((((int)threadIdx.y) * 32) + (((int)threadIdx.x) * 4)))+(1*3));
                int4 _18 = make_int4(16, 16, 16, 16);
                int4 _19;
                _19.x = (_17.x/_18.x);
                _19.y = (_17.y/_18.y);
                _19.z = (_17.z/_18.z);
                _19.w = (_17.w/_18.w);
              int4 _20 = make_int4(64, 64, 64, 64);
              int4 _21;
              _21.x = (_19.x*_20.x);
              _21.y = (_19.y*_20.y);
              _21.z = (_19.z*_20.z);
              _21.w = (_19.w*_20.w);
            int4 _22;
            _22.x = (_16.x+_21.x);
            _22.y = (_16.y+_21.y);
            _22.z = (_16.z+_21.z);
            _22.w = (_16.w+_21.w);
          int4 _23 = make_int4(((k_outer_outer * 16) + 16), ((k_outer_outer * 16) + 16), ((k_outer_outer * 16) + 16), ((k_outer_outer * 16) + 16));
          int4 _24;
          _24.x = (_22.x+_23.x);
          _24.y = (_22.y+_23.y);
          _24.z = (_22.z+_23.z);
          _24.w = (_22.w+_23.w);
          int4 _25 = (make_int4)(((((int)threadIdx.x) * 4))+(1*0), ((((int)threadIdx.x) * 4))+(1*1), ((((int)threadIdx.x) * 4))+(1*2), ((((int)threadIdx.x) * 4))+(1*3));
          int4 _26 = make_int4(16, 16, 16, 16);
          int4 _27;
          _27.x = (_25.x%_26.x);
          _27.y = (_25.y%_26.y);
          _27.z = (_25.z%_26.z);
          _27.w = (_25.w%_26.w);
        int4 _28;
        _28.x = (_24.x+_27.x);
        _28.y = (_24.y+_27.y);
        _28.z = (_24.z+_27.z);
        _28.w = (_24.w+_27.w);
      _15.x = A[_28.x];
      _15.y = A[_28.y];
      _15.z = A[_28.z];
      _15.w = A[_28.w];
    ((__shared__ float4*)(A_shared + (((((k_outer_outer + 1) % 2) * 1024) + (((int)threadIdx.y) * 32)) + (((int)threadIdx.x) * 4))))[0] = _15;
    for (int ax0_ax1_fused_ax2_fused_inner_inner_inner_s1 = 0; ax0_ax1_fused_ax2_fused_inner_inner_inner_s1 < 4; ++ax0_ax1_fused_ax2_fused_inner_inner_inner_s1) {
      if ((((((int)threadIdx.y) * 16) + (((int)threadIdx.x) * 2)) + ax0_ax1_fused_ax2_fused_inner_inner_inner_s1) < 512) {
        if (((((int)threadIdx.x) * 2) + ax0_ax1_fused_ax2_fused_inner_inner_inner_s1) < 16) {
          if (ax0_ax1_fused_ax2_fused_inner_inner_inner_s1 < 2) {
            B_shared[((((((k_outer_outer + 1) % 2) * 512) + (((int)threadIdx.y) * 16)) + (((int)threadIdx.x) * 2)) + ax0_ax1_fused_ax2_fused_inner_inner_inner_s1)] = B[((((((((int)blockIdx.z) * 32768) + (k_outer_outer * 8192)) + (((((((int)threadIdx.y) * 16) + (((int)threadIdx.x) * 2)) + ax0_ax1_fused_ax2_fused_inner_inner_inner_s1) / 32) * 512)) + (((int)blockIdx.x) * 32)) + ((((((int)threadIdx.y) * 16) + (((int)threadIdx.x) * 2)) + ax0_ax1_fused_ax2_fused_inner_inner_inner_s1) % 32)) + 8192)];
          }
        }
      }
    }
    A_shared_local[0] = A_shared[(((k_outer_outer % 2) * 1024) + (((int)threadIdx.y) * 16))];
    A_shared_local[1] = A_shared[((((k_outer_outer % 2) * 1024) + (((int)threadIdx.y) * 16)) + 512)];
    for (int ax2 = 0; ax2 < 2; ++ax2) {
      B_shared_local[ax2] = B_shared[((((k_outer_outer % 2) * 512) + (((int)threadIdx.x) * 2)) + ax2)];
      B_shared_local[(ax2 + 2)] = B_shared[(((((k_outer_outer % 2) * 512) + (((int)threadIdx.x) * 2)) + ax2) + 16)];
    }
    A_shared_local[2] = A_shared[((((k_outer_outer % 2) * 1024) + (((int)threadIdx.y) * 16)) + 1)];
    A_shared_local[3] = A_shared[((((k_outer_outer % 2) * 1024) + (((int)threadIdx.y) * 16)) + 513)];
    for (int ax21 = 0; ax21 < 2; ++ax21) {
      B_shared_local[(ax21 + 4)] = B_shared[(((((k_outer_outer % 2) * 512) + (((int)threadIdx.x) * 2)) + ax21) + 32)];
      B_shared_local[(ax21 + 6)] = B_shared[(((((k_outer_outer % 2) * 512) + (((int)threadIdx.x) * 2)) + ax21) + 48)];
    }
    for (int j_c = 0; j_c < 2; ++j_c) {
      C_local[j_c] = (C_local[j_c] + (A_shared_local[0] * B_shared_local[j_c]));
      C_local[(j_c + 4)] = (C_local[(j_c + 4)] + (A_shared_local[1] * B_shared_local[j_c]));
      C_local[(j_c + 2)] = (C_local[(j_c + 2)] + (A_shared_local[0] * B_shared_local[(j_c + 2)]));
      C_local[(j_c + 6)] = (C_local[(j_c + 6)] + (A_shared_local[1] * B_shared_local[(j_c + 2)]));
    }
    A_shared_local[0] = A_shared[((((k_outer_outer % 2) * 1024) + (((int)threadIdx.y) * 16)) + 2)];
    A_shared_local[1] = A_shared[((((k_outer_outer % 2) * 1024) + (((int)threadIdx.y) * 16)) + 514)];
    for (int ax22 = 0; ax22 < 2; ++ax22) {
      B_shared_local[ax22] = B_shared[(((((k_outer_outer % 2) * 512) + (((int)threadIdx.x) * 2)) + ax22) + 64)];
      B_shared_local[(ax22 + 2)] = B_shared[(((((k_outer_outer % 2) * 512) + (((int)threadIdx.x) * 2)) + ax22) + 80)];
    }
    for (int j_c1 = 0; j_c1 < 2; ++j_c1) {
      C_local[j_c1] = (C_local[j_c1] + (A_shared_local[2] * B_shared_local[(j_c1 + 4)]));
      C_local[(j_c1 + 4)] = (C_local[(j_c1 + 4)] + (A_shared_local[3] * B_shared_local[(j_c1 + 4)]));
      C_local[(j_c1 + 2)] = (C_local[(j_c1 + 2)] + (A_shared_local[2] * B_shared_local[(j_c1 + 6)]));
      C_local[(j_c1 + 6)] = (C_local[(j_c1 + 6)] + (A_shared_local[3] * B_shared_local[(j_c1 + 6)]));
    }
    A_shared_local[2] = A_shared[((((k_outer_outer % 2) * 1024) + (((int)threadIdx.y) * 16)) + 3)];
    A_shared_local[3] = A_shared[((((k_outer_outer % 2) * 1024) + (((int)threadIdx.y) * 16)) + 515)];
    for (int ax23 = 0; ax23 < 2; ++ax23) {
      B_shared_local[(ax23 + 4)] = B_shared[(((((k_outer_outer % 2) * 512) + (((int)threadIdx.x) * 2)) + ax23) + 96)];
      B_shared_local[(ax23 + 6)] = B_shared[(((((k_outer_outer % 2) * 512) + (((int)threadIdx.x) * 2)) + ax23) + 112)];
    }
    for (int j_c2 = 0; j_c2 < 2; ++j_c2) {
      C_local[j_c2] = (C_local[j_c2] + (A_shared_local[0] * B_shared_local[j_c2]));
      C_local[(j_c2 + 4)] = (C_local[(j_c2 + 4)] + (A_shared_local[1] * B_shared_local[j_c2]));
      C_local[(j_c2 + 2)] = (C_local[(j_c2 + 2)] + (A_shared_local[0] * B_shared_local[(j_c2 + 2)]));
      C_local[(j_c2 + 6)] = (C_local[(j_c2 + 6)] + (A_shared_local[1] * B_shared_local[(j_c2 + 2)]));
    }
    A_shared_local[0] = A_shared[((((k_outer_outer % 2) * 1024) + (((int)threadIdx.y) * 16)) + 4)];
    A_shared_local[1] = A_shared[((((k_outer_outer % 2) * 1024) + (((int)threadIdx.y) * 16)) + 516)];
    for (int ax24 = 0; ax24 < 2; ++ax24) {
      B_shared_local[ax24] = B_shared[(((((k_outer_outer % 2) * 512) + (((int)threadIdx.x) * 2)) + ax24) + 128)];
      B_shared_local[(ax24 + 2)] = B_shared[(((((k_outer_outer % 2) * 512) + (((int)threadIdx.x) * 2)) + ax24) + 144)];
    }
    for (int j_c3 = 0; j_c3 < 2; ++j_c3) {
      C_local[j_c3] = (C_local[j_c3] + (A_shared_local[2] * B_shared_local[(j_c3 + 4)]));
      C_local[(j_c3 + 4)] = (C_local[(j_c3 + 4)] + (A_shared_local[3] * B_shared_local[(j_c3 + 4)]));
      C_local[(j_c3 + 2)] = (C_local[(j_c3 + 2)] + (A_shared_local[2] * B_shared_local[(j_c3 + 6)]));
      C_local[(j_c3 + 6)] = (C_local[(j_c3 + 6)] + (A_shared_local[3] * B_shared_local[(j_c3 + 6)]));
    }
    A_shared_local[2] = A_shared[((((k_outer_outer % 2) * 1024) + (((int)threadIdx.y) * 16)) + 5)];
    A_shared_local[3] = A_shared[((((k_outer_outer % 2) * 1024) + (((int)threadIdx.y) * 16)) + 517)];
    for (int ax25 = 0; ax25 < 2; ++ax25) {
      B_shared_local[(ax25 + 4)] = B_shared[(((((k_outer_outer % 2) * 512) + (((int)threadIdx.x) * 2)) + ax25) + 160)];
      B_shared_local[(ax25 + 6)] = B_shared[(((((k_outer_outer % 2) * 512) + (((int)threadIdx.x) * 2)) + ax25) + 176)];
    }
    for (int j_c4 = 0; j_c4 < 2; ++j_c4) {
      C_local[j_c4] = (C_local[j_c4] + (A_shared_local[0] * B_shared_local[j_c4]));
      C_local[(j_c4 + 4)] = (C_local[(j_c4 + 4)] + (A_shared_local[1] * B_shared_local[j_c4]));
      C_local[(j_c4 + 2)] = (C_local[(j_c4 + 2)] + (A_shared_local[0] * B_shared_local[(j_c4 + 2)]));
      C_local[(j_c4 + 6)] = (C_local[(j_c4 + 6)] + (A_shared_local[1] * B_shared_local[(j_c4 + 2)]));
    }
    A_shared_local[0] = A_shared[((((k_outer_outer % 2) * 1024) + (((int)threadIdx.y) * 16)) + 6)];
    A_shared_local[1] = A_shared[((((k_outer_outer % 2) * 1024) + (((int)threadIdx.y) * 16)) + 518)];
    for (int ax26 = 0; ax26 < 2; ++ax26) {
      B_shared_local[ax26] = B_shared[(((((k_outer_outer % 2) * 512) + (((int)threadIdx.x) * 2)) + ax26) + 192)];
      B_shared_local[(ax26 + 2)] = B_shared[(((((k_outer_outer % 2) * 512) + (((int)threadIdx.x) * 2)) + ax26) + 208)];
    }
    for (int j_c5 = 0; j_c5 < 2; ++j_c5) {
      C_local[j_c5] = (C_local[j_c5] + (A_shared_local[2] * B_shared_local[(j_c5 + 4)]));
      C_local[(j_c5 + 4)] = (C_local[(j_c5 + 4)] + (A_shared_local[3] * B_shared_local[(j_c5 + 4)]));
      C_local[(j_c5 + 2)] = (C_local[(j_c5 + 2)] + (A_shared_local[2] * B_shared_local[(j_c5 + 6)]));
      C_local[(j_c5 + 6)] = (C_local[(j_c5 + 6)] + (A_shared_local[3] * B_shared_local[(j_c5 + 6)]));
    }
    A_shared_local[2] = A_shared[((((k_outer_outer % 2) * 1024) + (((int)threadIdx.y) * 16)) + 7)];
    A_shared_local[3] = A_shared[((((k_outer_outer % 2) * 1024) + (((int)threadIdx.y) * 16)) + 519)];
    for (int ax27 = 0; ax27 < 2; ++ax27) {
      B_shared_local[(ax27 + 4)] = B_shared[(((((k_outer_outer % 2) * 512) + (((int)threadIdx.x) * 2)) + ax27) + 224)];
      B_shared_local[(ax27 + 6)] = B_shared[(((((k_outer_outer % 2) * 512) + (((int)threadIdx.x) * 2)) + ax27) + 240)];
    }
    for (int j_c6 = 0; j_c6 < 2; ++j_c6) {
      C_local[j_c6] = (C_local[j_c6] + (A_shared_local[0] * B_shared_local[j_c6]));
      C_local[(j_c6 + 4)] = (C_local[(j_c6 + 4)] + (A_shared_local[1] * B_shared_local[j_c6]));
      C_local[(j_c6 + 2)] = (C_local[(j_c6 + 2)] + (A_shared_local[0] * B_shared_local[(j_c6 + 2)]));
      C_local[(j_c6 + 6)] = (C_local[(j_c6 + 6)] + (A_shared_local[1] * B_shared_local[(j_c6 + 2)]));
    }
    A_shared_local[0] = A_shared[((((k_outer_outer % 2) * 1024) + (((int)threadIdx.y) * 16)) + 8)];
    A_shared_local[1] = A_shared[((((k_outer_outer % 2) * 1024) + (((int)threadIdx.y) * 16)) + 520)];
    for (int ax28 = 0; ax28 < 2; ++ax28) {
      B_shared_local[ax28] = B_shared[(((((k_outer_outer % 2) * 512) + (((int)threadIdx.x) * 2)) + ax28) + 256)];
      B_shared_local[(ax28 + 2)] = B_shared[(((((k_outer_outer % 2) * 512) + (((int)threadIdx.x) * 2)) + ax28) + 272)];
    }
    for (int j_c7 = 0; j_c7 < 2; ++j_c7) {
      C_local[j_c7] = (C_local[j_c7] + (A_shared_local[2] * B_shared_local[(j_c7 + 4)]));
      C_local[(j_c7 + 4)] = (C_local[(j_c7 + 4)] + (A_shared_local[3] * B_shared_local[(j_c7 + 4)]));
      C_local[(j_c7 + 2)] = (C_local[(j_c7 + 2)] + (A_shared_local[2] * B_shared_local[(j_c7 + 6)]));
      C_local[(j_c7 + 6)] = (C_local[(j_c7 + 6)] + (A_shared_local[3] * B_shared_local[(j_c7 + 6)]));
    }
    A_shared_local[2] = A_shared[((((k_outer_outer % 2) * 1024) + (((int)threadIdx.y) * 16)) + 9)];
    A_shared_local[3] = A_shared[((((k_outer_outer % 2) * 1024) + (((int)threadIdx.y) * 16)) + 521)];
    for (int ax29 = 0; ax29 < 2; ++ax29) {
      B_shared_local[(ax29 + 4)] = B_shared[(((((k_outer_outer % 2) * 512) + (((int)threadIdx.x) * 2)) + ax29) + 288)];
      B_shared_local[(ax29 + 6)] = B_shared[(((((k_outer_outer % 2) * 512) + (((int)threadIdx.x) * 2)) + ax29) + 304)];
    }
    for (int j_c8 = 0; j_c8 < 2; ++j_c8) {
      C_local[j_c8] = (C_local[j_c8] + (A_shared_local[0] * B_shared_local[j_c8]));
      C_local[(j_c8 + 4)] = (C_local[(j_c8 + 4)] + (A_shared_local[1] * B_shared_local[j_c8]));
      C_local[(j_c8 + 2)] = (C_local[(j_c8 + 2)] + (A_shared_local[0] * B_shared_local[(j_c8 + 2)]));
      C_local[(j_c8 + 6)] = (C_local[(j_c8 + 6)] + (A_shared_local[1] * B_shared_local[(j_c8 + 2)]));
    }
    A_shared_local[0] = A_shared[((((k_outer_outer % 2) * 1024) + (((int)threadIdx.y) * 16)) + 10)];
    A_shared_local[1] = A_shared[((((k_outer_outer % 2) * 1024) + (((int)threadIdx.y) * 16)) + 522)];
    for (int ax210 = 0; ax210 < 2; ++ax210) {
      B_shared_local[ax210] = B_shared[(((((k_outer_outer % 2) * 512) + (((int)threadIdx.x) * 2)) + ax210) + 320)];
      B_shared_local[(ax210 + 2)] = B_shared[(((((k_outer_outer % 2) * 512) + (((int)threadIdx.x) * 2)) + ax210) + 336)];
    }
    for (int j_c9 = 0; j_c9 < 2; ++j_c9) {
      C_local[j_c9] = (C_local[j_c9] + (A_shared_local[2] * B_shared_local[(j_c9 + 4)]));
      C_local[(j_c9 + 4)] = (C_local[(j_c9 + 4)] + (A_shared_local[3] * B_shared_local[(j_c9 + 4)]));
      C_local[(j_c9 + 2)] = (C_local[(j_c9 + 2)] + (A_shared_local[2] * B_shared_local[(j_c9 + 6)]));
      C_local[(j_c9 + 6)] = (C_local[(j_c9 + 6)] + (A_shared_local[3] * B_shared_local[(j_c9 + 6)]));
    }
    A_shared_local[2] = A_shared[((((k_outer_outer % 2) * 1024) + (((int)threadIdx.y) * 16)) + 11)];
    A_shared_local[3] = A_shared[((((k_outer_outer % 2) * 1024) + (((int)threadIdx.y) * 16)) + 523)];
    for (int ax211 = 0; ax211 < 2; ++ax211) {
      B_shared_local[(ax211 + 4)] = B_shared[(((((k_outer_outer % 2) * 512) + (((int)threadIdx.x) * 2)) + ax211) + 352)];
      B_shared_local[(ax211 + 6)] = B_shared[(((((k_outer_outer % 2) * 512) + (((int)threadIdx.x) * 2)) + ax211) + 368)];
    }
    for (int j_c10 = 0; j_c10 < 2; ++j_c10) {
      C_local[j_c10] = (C_local[j_c10] + (A_shared_local[0] * B_shared_local[j_c10]));
      C_local[(j_c10 + 4)] = (C_local[(j_c10 + 4)] + (A_shared_local[1] * B_shared_local[j_c10]));
      C_local[(j_c10 + 2)] = (C_local[(j_c10 + 2)] + (A_shared_local[0] * B_shared_local[(j_c10 + 2)]));
      C_local[(j_c10 + 6)] = (C_local[(j_c10 + 6)] + (A_shared_local[1] * B_shared_local[(j_c10 + 2)]));
    }
    A_shared_local[0] = A_shared[((((k_outer_outer % 2) * 1024) + (((int)threadIdx.y) * 16)) + 12)];
    A_shared_local[1] = A_shared[((((k_outer_outer % 2) * 1024) + (((int)threadIdx.y) * 16)) + 524)];
    for (int ax212 = 0; ax212 < 2; ++ax212) {
      B_shared_local[ax212] = B_shared[(((((k_outer_outer % 2) * 512) + (((int)threadIdx.x) * 2)) + ax212) + 384)];
      B_shared_local[(ax212 + 2)] = B_shared[(((((k_outer_outer % 2) * 512) + (((int)threadIdx.x) * 2)) + ax212) + 400)];
    }
    for (int j_c11 = 0; j_c11 < 2; ++j_c11) {
      C_local[j_c11] = (C_local[j_c11] + (A_shared_local[2] * B_shared_local[(j_c11 + 4)]));
      C_local[(j_c11 + 4)] = (C_local[(j_c11 + 4)] + (A_shared_local[3] * B_shared_local[(j_c11 + 4)]));
      C_local[(j_c11 + 2)] = (C_local[(j_c11 + 2)] + (A_shared_local[2] * B_shared_local[(j_c11 + 6)]));
      C_local[(j_c11 + 6)] = (C_local[(j_c11 + 6)] + (A_shared_local[3] * B_shared_local[(j_c11 + 6)]));
    }
    A_shared_local[2] = A_shared[((((k_outer_outer % 2) * 1024) + (((int)threadIdx.y) * 16)) + 13)];
    A_shared_local[3] = A_shared[((((k_outer_outer % 2) * 1024) + (((int)threadIdx.y) * 16)) + 525)];
    for (int ax213 = 0; ax213 < 2; ++ax213) {
      B_shared_local[(ax213 + 4)] = B_shared[(((((k_outer_outer % 2) * 512) + (((int)threadIdx.x) * 2)) + ax213) + 416)];
      B_shared_local[(ax213 + 6)] = B_shared[(((((k_outer_outer % 2) * 512) + (((int)threadIdx.x) * 2)) + ax213) + 432)];
    }
    for (int j_c12 = 0; j_c12 < 2; ++j_c12) {
      C_local[j_c12] = (C_local[j_c12] + (A_shared_local[0] * B_shared_local[j_c12]));
      C_local[(j_c12 + 4)] = (C_local[(j_c12 + 4)] + (A_shared_local[1] * B_shared_local[j_c12]));
      C_local[(j_c12 + 2)] = (C_local[(j_c12 + 2)] + (A_shared_local[0] * B_shared_local[(j_c12 + 2)]));
      C_local[(j_c12 + 6)] = (C_local[(j_c12 + 6)] + (A_shared_local[1] * B_shared_local[(j_c12 + 2)]));
    }
    A_shared_local[0] = A_shared[((((k_outer_outer % 2) * 1024) + (((int)threadIdx.y) * 16)) + 14)];
    A_shared_local[1] = A_shared[((((k_outer_outer % 2) * 1024) + (((int)threadIdx.y) * 16)) + 526)];
    for (int ax214 = 0; ax214 < 2; ++ax214) {
      B_shared_local[ax214] = B_shared[(((((k_outer_outer % 2) * 512) + (((int)threadIdx.x) * 2)) + ax214) + 448)];
      B_shared_local[(ax214 + 2)] = B_shared[(((((k_outer_outer % 2) * 512) + (((int)threadIdx.x) * 2)) + ax214) + 464)];
    }
    for (int j_c13 = 0; j_c13 < 2; ++j_c13) {
      C_local[j_c13] = (C_local[j_c13] + (A_shared_local[2] * B_shared_local[(j_c13 + 4)]));
      C_local[(j_c13 + 4)] = (C_local[(j_c13 + 4)] + (A_shared_local[3] * B_shared_local[(j_c13 + 4)]));
      C_local[(j_c13 + 2)] = (C_local[(j_c13 + 2)] + (A_shared_local[2] * B_shared_local[(j_c13 + 6)]));
      C_local[(j_c13 + 6)] = (C_local[(j_c13 + 6)] + (A_shared_local[3] * B_shared_local[(j_c13 + 6)]));
    }
    A_shared_local[2] = A_shared[((((k_outer_outer % 2) * 1024) + (((int)threadIdx.y) * 16)) + 15)];
    A_shared_local[3] = A_shared[((((k_outer_outer % 2) * 1024) + (((int)threadIdx.y) * 16)) + 527)];
    for (int ax215 = 0; ax215 < 2; ++ax215) {
      B_shared_local[(ax215 + 4)] = B_shared[(((((k_outer_outer % 2) * 512) + (((int)threadIdx.x) * 2)) + ax215) + 480)];
      B_shared_local[(ax215 + 6)] = B_shared[(((((k_outer_outer % 2) * 512) + (((int)threadIdx.x) * 2)) + ax215) + 496)];
    }
    for (int j_c14 = 0; j_c14 < 2; ++j_c14) {
      C_local[j_c14] = (C_local[j_c14] + (A_shared_local[0] * B_shared_local[j_c14]));
      C_local[(j_c14 + 4)] = (C_local[(j_c14 + 4)] + (A_shared_local[1] * B_shared_local[j_c14]));
      C_local[(j_c14 + 2)] = (C_local[(j_c14 + 2)] + (A_shared_local[0] * B_shared_local[(j_c14 + 2)]));
      C_local[(j_c14 + 6)] = (C_local[(j_c14 + 6)] + (A_shared_local[1] * B_shared_local[(j_c14 + 2)]));
    }
    for (int j_c15 = 0; j_c15 < 2; ++j_c15) {
      C_local[j_c15] = (C_local[j_c15] + (A_shared_local[2] * B_shared_local[(j_c15 + 4)]));
      C_local[(j_c15 + 4)] = (C_local[(j_c15 + 4)] + (A_shared_local[3] * B_shared_local[(j_c15 + 4)]));
      C_local[(j_c15 + 2)] = (C_local[(j_c15 + 2)] + (A_shared_local[2] * B_shared_local[(j_c15 + 6)]));
      C_local[(j_c15 + 6)] = (C_local[(j_c15 + 6)] + (A_shared_local[3] * B_shared_local[(j_c15 + 6)]));
    }
  }
  __syncthreads();
  A_shared_local1[0] = A_shared[((((int)threadIdx.y) * 16) + 1024)];
  A_shared_local1[1] = A_shared[((((int)threadIdx.y) * 16) + 1536)];
  for (int ax216 = 0; ax216 < 2; ++ax216) {
    B_shared_local1[ax216] = B_shared[(((((int)threadIdx.x) * 2) + ax216) + 512)];
    B_shared_local1[(ax216 + 2)] = B_shared[(((((int)threadIdx.x) * 2) + ax216) + 528)];
  }
  A_shared_local1[2] = A_shared[((((int)threadIdx.y) * 16) + 1025)];
  A_shared_local1[3] = A_shared[((((int)threadIdx.y) * 16) + 1537)];
  for (int ax217 = 0; ax217 < 2; ++ax217) {
    B_shared_local1[(ax217 + 4)] = B_shared[(((((int)threadIdx.x) * 2) + ax217) + 544)];
    B_shared_local1[(ax217 + 6)] = B_shared[(((((int)threadIdx.x) * 2) + ax217) + 560)];
  }
  for (int j_c16 = 0; j_c16 < 2; ++j_c16) {
    C_local[j_c16] = (C_local[j_c16] + (A_shared_local1[0] * B_shared_local1[j_c16]));
    C_local[(j_c16 + 4)] = (C_local[(j_c16 + 4)] + (A_shared_local1[1] * B_shared_local1[j_c16]));
    C_local[(j_c16 + 2)] = (C_local[(j_c16 + 2)] + (A_shared_local1[0] * B_shared_local1[(j_c16 + 2)]));
    C_local[(j_c16 + 6)] = (C_local[(j_c16 + 6)] + (A_shared_local1[1] * B_shared_local1[(j_c16 + 2)]));
  }
  A_shared_local1[0] = A_shared[((((int)threadIdx.y) * 16) + 1026)];
  A_shared_local1[1] = A_shared[((((int)threadIdx.y) * 16) + 1538)];
  for (int ax218 = 0; ax218 < 2; ++ax218) {
    B_shared_local1[ax218] = B_shared[(((((int)threadIdx.x) * 2) + ax218) + 576)];
    B_shared_local1[(ax218 + 2)] = B_shared[(((((int)threadIdx.x) * 2) + ax218) + 592)];
  }
  for (int j_c17 = 0; j_c17 < 2; ++j_c17) {
    C_local[j_c17] = (C_local[j_c17] + (A_shared_local1[2] * B_shared_local1[(j_c17 + 4)]));
    C_local[(j_c17 + 4)] = (C_local[(j_c17 + 4)] + (A_shared_local1[3] * B_shared_local1[(j_c17 + 4)]));
    C_local[(j_c17 + 2)] = (C_local[(j_c17 + 2)] + (A_shared_local1[2] * B_shared_local1[(j_c17 + 6)]));
    C_local[(j_c17 + 6)] = (C_local[(j_c17 + 6)] + (A_shared_local1[3] * B_shared_local1[(j_c17 + 6)]));
  }
  A_shared_local1[2] = A_shared[((((int)threadIdx.y) * 16) + 1027)];
  A_shared_local1[3] = A_shared[((((int)threadIdx.y) * 16) + 1539)];
  for (int ax219 = 0; ax219 < 2; ++ax219) {
    B_shared_local1[(ax219 + 4)] = B_shared[(((((int)threadIdx.x) * 2) + ax219) + 608)];
    B_shared_local1[(ax219 + 6)] = B_shared[(((((int)threadIdx.x) * 2) + ax219) + 624)];
  }
  for (int j_c18 = 0; j_c18 < 2; ++j_c18) {
    C_local[j_c18] = (C_local[j_c18] + (A_shared_local1[0] * B_shared_local1[j_c18]));
    C_local[(j_c18 + 4)] = (C_local[(j_c18 + 4)] + (A_shared_local1[1] * B_shared_local1[j_c18]));
    C_local[(j_c18 + 2)] = (C_local[(j_c18 + 2)] + (A_shared_local1[0] * B_shared_local1[(j_c18 + 2)]));
    C_local[(j_c18 + 6)] = (C_local[(j_c18 + 6)] + (A_shared_local1[1] * B_shared_local1[(j_c18 + 2)]));
  }
  A_shared_local1[0] = A_shared[((((int)threadIdx.y) * 16) + 1028)];
  A_shared_local1[1] = A_shared[((((int)threadIdx.y) * 16) + 1540)];
  for (int ax220 = 0; ax220 < 2; ++ax220) {
    B_shared_local1[ax220] = B_shared[(((((int)threadIdx.x) * 2) + ax220) + 640)];
    B_shared_local1[(ax220 + 2)] = B_shared[(((((int)threadIdx.x) * 2) + ax220) + 656)];
  }
  for (int j_c19 = 0; j_c19 < 2; ++j_c19) {
    C_local[j_c19] = (C_local[j_c19] + (A_shared_local1[2] * B_shared_local1[(j_c19 + 4)]));
    C_local[(j_c19 + 4)] = (C_local[(j_c19 + 4)] + (A_shared_local1[3] * B_shared_local1[(j_c19 + 4)]));
    C_local[(j_c19 + 2)] = (C_local[(j_c19 + 2)] + (A_shared_local1[2] * B_shared_local1[(j_c19 + 6)]));
    C_local[(j_c19 + 6)] = (C_local[(j_c19 + 6)] + (A_shared_local1[3] * B_shared_local1[(j_c19 + 6)]));
  }
  A_shared_local1[2] = A_shared[((((int)threadIdx.y) * 16) + 1029)];
  A_shared_local1[3] = A_shared[((((int)threadIdx.y) * 16) + 1541)];
  for (int ax221 = 0; ax221 < 2; ++ax221) {
    B_shared_local1[(ax221 + 4)] = B_shared[(((((int)threadIdx.x) * 2) + ax221) + 672)];
    B_shared_local1[(ax221 + 6)] = B_shared[(((((int)threadIdx.x) * 2) + ax221) + 688)];
  }
  for (int j_c20 = 0; j_c20 < 2; ++j_c20) {
    C_local[j_c20] = (C_local[j_c20] + (A_shared_local1[0] * B_shared_local1[j_c20]));
    C_local[(j_c20 + 4)] = (C_local[(j_c20 + 4)] + (A_shared_local1[1] * B_shared_local1[j_c20]));
    C_local[(j_c20 + 2)] = (C_local[(j_c20 + 2)] + (A_shared_local1[0] * B_shared_local1[(j_c20 + 2)]));
    C_local[(j_c20 + 6)] = (C_local[(j_c20 + 6)] + (A_shared_local1[1] * B_shared_local1[(j_c20 + 2)]));
  }
  A_shared_local1[0] = A_shared[((((int)threadIdx.y) * 16) + 1030)];
  A_shared_local1[1] = A_shared[((((int)threadIdx.y) * 16) + 1542)];
  for (int ax222 = 0; ax222 < 2; ++ax222) {
    B_shared_local1[ax222] = B_shared[(((((int)threadIdx.x) * 2) + ax222) + 704)];
    B_shared_local1[(ax222 + 2)] = B_shared[(((((int)threadIdx.x) * 2) + ax222) + 720)];
  }
  for (int j_c21 = 0; j_c21 < 2; ++j_c21) {
    C_local[j_c21] = (C_local[j_c21] + (A_shared_local1[2] * B_shared_local1[(j_c21 + 4)]));
    C_local[(j_c21 + 4)] = (C_local[(j_c21 + 4)] + (A_shared_local1[3] * B_shared_local1[(j_c21 + 4)]));
    C_local[(j_c21 + 2)] = (C_local[(j_c21 + 2)] + (A_shared_local1[2] * B_shared_local1[(j_c21 + 6)]));
    C_local[(j_c21 + 6)] = (C_local[(j_c21 + 6)] + (A_shared_local1[3] * B_shared_local1[(j_c21 + 6)]));
  }
  A_shared_local1[2] = A_shared[((((int)threadIdx.y) * 16) + 1031)];
  A_shared_local1[3] = A_shared[((((int)threadIdx.y) * 16) + 1543)];
  for (int ax223 = 0; ax223 < 2; ++ax223) {
    B_shared_local1[(ax223 + 4)] = B_shared[(((((int)threadIdx.x) * 2) + ax223) + 736)];
    B_shared_local1[(ax223 + 6)] = B_shared[(((((int)threadIdx.x) * 2) + ax223) + 752)];
  }
  for (int j_c22 = 0; j_c22 < 2; ++j_c22) {
    C_local[j_c22] = (C_local[j_c22] + (A_shared_local1[0] * B_shared_local1[j_c22]));
    C_local[(j_c22 + 4)] = (C_local[(j_c22 + 4)] + (A_shared_local1[1] * B_shared_local1[j_c22]));
    C_local[(j_c22 + 2)] = (C_local[(j_c22 + 2)] + (A_shared_local1[0] * B_shared_local1[(j_c22 + 2)]));
    C_local[(j_c22 + 6)] = (C_local[(j_c22 + 6)] + (A_shared_local1[1] * B_shared_local1[(j_c22 + 2)]));
  }
  A_shared_local1[0] = A_shared[((((int)threadIdx.y) * 16) + 1032)];
  A_shared_local1[1] = A_shared[((((int)threadIdx.y) * 16) + 1544)];
  for (int ax224 = 0; ax224 < 2; ++ax224) {
    B_shared_local1[ax224] = B_shared[(((((int)threadIdx.x) * 2) + ax224) + 768)];
    B_shared_local1[(ax224 + 2)] = B_shared[(((((int)threadIdx.x) * 2) + ax224) + 784)];
  }
  for (int j_c23 = 0; j_c23 < 2; ++j_c23) {
    C_local[j_c23] = (C_local[j_c23] + (A_shared_local1[2] * B_shared_local1[(j_c23 + 4)]));
    C_local[(j_c23 + 4)] = (C_local[(j_c23 + 4)] + (A_shared_local1[3] * B_shared_local1[(j_c23 + 4)]));
    C_local[(j_c23 + 2)] = (C_local[(j_c23 + 2)] + (A_shared_local1[2] * B_shared_local1[(j_c23 + 6)]));
    C_local[(j_c23 + 6)] = (C_local[(j_c23 + 6)] + (A_shared_local1[3] * B_shared_local1[(j_c23 + 6)]));
  }
  A_shared_local1[2] = A_shared[((((int)threadIdx.y) * 16) + 1033)];
  A_shared_local1[3] = A_shared[((((int)threadIdx.y) * 16) + 1545)];
  for (int ax225 = 0; ax225 < 2; ++ax225) {
    B_shared_local1[(ax225 + 4)] = B_shared[(((((int)threadIdx.x) * 2) + ax225) + 800)];
    B_shared_local1[(ax225 + 6)] = B_shared[(((((int)threadIdx.x) * 2) + ax225) + 816)];
  }
  for (int j_c24 = 0; j_c24 < 2; ++j_c24) {
    C_local[j_c24] = (C_local[j_c24] + (A_shared_local1[0] * B_shared_local1[j_c24]));
    C_local[(j_c24 + 4)] = (C_local[(j_c24 + 4)] + (A_shared_local1[1] * B_shared_local1[j_c24]));
    C_local[(j_c24 + 2)] = (C_local[(j_c24 + 2)] + (A_shared_local1[0] * B_shared_local1[(j_c24 + 2)]));
    C_local[(j_c24 + 6)] = (C_local[(j_c24 + 6)] + (A_shared_local1[1] * B_shared_local1[(j_c24 + 2)]));
  }
  A_shared_local1[0] = A_shared[((((int)threadIdx.y) * 16) + 1034)];
  A_shared_local1[1] = A_shared[((((int)threadIdx.y) * 16) + 1546)];
  for (int ax226 = 0; ax226 < 2; ++ax226) {
    B_shared_local1[ax226] = B_shared[(((((int)threadIdx.x) * 2) + ax226) + 832)];
    B_shared_local1[(ax226 + 2)] = B_shared[(((((int)threadIdx.x) * 2) + ax226) + 848)];
  }
  for (int j_c25 = 0; j_c25 < 2; ++j_c25) {
    C_local[j_c25] = (C_local[j_c25] + (A_shared_local1[2] * B_shared_local1[(j_c25 + 4)]));
    C_local[(j_c25 + 4)] = (C_local[(j_c25 + 4)] + (A_shared_local1[3] * B_shared_local1[(j_c25 + 4)]));
    C_local[(j_c25 + 2)] = (C_local[(j_c25 + 2)] + (A_shared_local1[2] * B_shared_local1[(j_c25 + 6)]));
    C_local[(j_c25 + 6)] = (C_local[(j_c25 + 6)] + (A_shared_local1[3] * B_shared_local1[(j_c25 + 6)]));
  }
  A_shared_local1[2] = A_shared[((((int)threadIdx.y) * 16) + 1035)];
  A_shared_local1[3] = A_shared[((((int)threadIdx.y) * 16) + 1547)];
  for (int ax227 = 0; ax227 < 2; ++ax227) {
    B_shared_local1[(ax227 + 4)] = B_shared[(((((int)threadIdx.x) * 2) + ax227) + 864)];
    B_shared_local1[(ax227 + 6)] = B_shared[(((((int)threadIdx.x) * 2) + ax227) + 880)];
  }
  for (int j_c26 = 0; j_c26 < 2; ++j_c26) {
    C_local[j_c26] = (C_local[j_c26] + (A_shared_local1[0] * B_shared_local1[j_c26]));
    C_local[(j_c26 + 4)] = (C_local[(j_c26 + 4)] + (A_shared_local1[1] * B_shared_local1[j_c26]));
    C_local[(j_c26 + 2)] = (C_local[(j_c26 + 2)] + (A_shared_local1[0] * B_shared_local1[(j_c26 + 2)]));
    C_local[(j_c26 + 6)] = (C_local[(j_c26 + 6)] + (A_shared_local1[1] * B_shared_local1[(j_c26 + 2)]));
  }
  A_shared_local1[0] = A_shared[((((int)threadIdx.y) * 16) + 1036)];
  A_shared_local1[1] = A_shared[((((int)threadIdx.y) * 16) + 1548)];
  for (int ax228 = 0; ax228 < 2; ++ax228) {
    B_shared_local1[ax228] = B_shared[(((((int)threadIdx.x) * 2) + ax228) + 896)];
    B_shared_local1[(ax228 + 2)] = B_shared[(((((int)threadIdx.x) * 2) + ax228) + 912)];
  }
  for (int j_c27 = 0; j_c27 < 2; ++j_c27) {
    C_local[j_c27] = (C_local[j_c27] + (A_shared_local1[2] * B_shared_local1[(j_c27 + 4)]));
    C_local[(j_c27 + 4)] = (C_local[(j_c27 + 4)] + (A_shared_local1[3] * B_shared_local1[(j_c27 + 4)]));
    C_local[(j_c27 + 2)] = (C_local[(j_c27 + 2)] + (A_shared_local1[2] * B_shared_local1[(j_c27 + 6)]));
    C_local[(j_c27 + 6)] = (C_local[(j_c27 + 6)] + (A_shared_local1[3] * B_shared_local1[(j_c27 + 6)]));
  }
  A_shared_local1[2] = A_shared[((((int)threadIdx.y) * 16) + 1037)];
  A_shared_local1[3] = A_shared[((((int)threadIdx.y) * 16) + 1549)];
  for (int ax229 = 0; ax229 < 2; ++ax229) {
    B_shared_local1[(ax229 + 4)] = B_shared[(((((int)threadIdx.x) * 2) + ax229) + 928)];
    B_shared_local1[(ax229 + 6)] = B_shared[(((((int)threadIdx.x) * 2) + ax229) + 944)];
  }
  for (int j_c28 = 0; j_c28 < 2; ++j_c28) {
    C_local[j_c28] = (C_local[j_c28] + (A_shared_local1[0] * B_shared_local1[j_c28]));
    C_local[(j_c28 + 4)] = (C_local[(j_c28 + 4)] + (A_shared_local1[1] * B_shared_local1[j_c28]));
    C_local[(j_c28 + 2)] = (C_local[(j_c28 + 2)] + (A_shared_local1[0] * B_shared_local1[(j_c28 + 2)]));
    C_local[(j_c28 + 6)] = (C_local[(j_c28 + 6)] + (A_shared_local1[1] * B_shared_local1[(j_c28 + 2)]));
  }
  A_shared_local1[0] = A_shared[((((int)threadIdx.y) * 16) + 1038)];
  A_shared_local1[1] = A_shared[((((int)threadIdx.y) * 16) + 1550)];
  for (int ax230 = 0; ax230 < 2; ++ax230) {
    B_shared_local1[ax230] = B_shared[(((((int)threadIdx.x) * 2) + ax230) + 960)];
    B_shared_local1[(ax230 + 2)] = B_shared[(((((int)threadIdx.x) * 2) + ax230) + 976)];
  }
  for (int j_c29 = 0; j_c29 < 2; ++j_c29) {
    C_local[j_c29] = (C_local[j_c29] + (A_shared_local1[2] * B_shared_local1[(j_c29 + 4)]));
    C_local[(j_c29 + 4)] = (C_local[(j_c29 + 4)] + (A_shared_local1[3] * B_shared_local1[(j_c29 + 4)]));
    C_local[(j_c29 + 2)] = (C_local[(j_c29 + 2)] + (A_shared_local1[2] * B_shared_local1[(j_c29 + 6)]));
    C_local[(j_c29 + 6)] = (C_local[(j_c29 + 6)] + (A_shared_local1[3] * B_shared_local1[(j_c29 + 6)]));
  }
  A_shared_local1[2] = A_shared[((((int)threadIdx.y) * 16) + 1039)];
  A_shared_local1[3] = A_shared[((((int)threadIdx.y) * 16) + 1551)];
  for (int ax231 = 0; ax231 < 2; ++ax231) {
    B_shared_local1[(ax231 + 4)] = B_shared[(((((int)threadIdx.x) * 2) + ax231) + 992)];
    B_shared_local1[(ax231 + 6)] = B_shared[(((((int)threadIdx.x) * 2) + ax231) + 1008)];
  }
  for (int j_c30 = 0; j_c30 < 2; ++j_c30) {
    C_local[j_c30] = (C_local[j_c30] + (A_shared_local1[0] * B_shared_local1[j_c30]));
    C_local[(j_c30 + 4)] = (C_local[(j_c30 + 4)] + (A_shared_local1[1] * B_shared_local1[j_c30]));
    C_local[(j_c30 + 2)] = (C_local[(j_c30 + 2)] + (A_shared_local1[0] * B_shared_local1[(j_c30 + 2)]));
    C_local[(j_c30 + 6)] = (C_local[(j_c30 + 6)] + (A_shared_local1[1] * B_shared_local1[(j_c30 + 2)]));
  }
  for (int j_c31 = 0; j_c31 < 2; ++j_c31) {
    C_local[j_c31] = (C_local[j_c31] + (A_shared_local1[2] * B_shared_local1[(j_c31 + 4)]));
    C_local[(j_c31 + 4)] = (C_local[(j_c31 + 4)] + (A_shared_local1[3] * B_shared_local1[(j_c31 + 4)]));
    C_local[(j_c31 + 2)] = (C_local[(j_c31 + 2)] + (A_shared_local1[2] * B_shared_local1[(j_c31 + 6)]));
    C_local[(j_c31 + 6)] = (C_local[(j_c31 + 6)] + (A_shared_local1[3] * B_shared_local1[(j_c31 + 6)]));
  }
  for (int j_inner_inner_inner = 0; j_inner_inner_inner < 2; ++j_inner_inner_inner) {
    C[((((((((int)blockIdx.z) * 262144) + (((int)blockIdx.y) * 32768)) + (((int)threadIdx.y) * 512)) + (((int)blockIdx.x) * 32)) + (((int)threadIdx.x) * 2)) + j_inner_inner_inner)] = C_local[j_inner_inner_inner];
    C[(((((((((int)blockIdx.z) * 262144) + (((int)blockIdx.y) * 32768)) + (((int)threadIdx.y) * 512)) + (((int)blockIdx.x) * 32)) + (((int)threadIdx.x) * 2)) + j_inner_inner_inner) + 16384)] = C_local[(j_inner_inner_inner + 4)];
    C[(((((((((int)blockIdx.z) * 262144) + (((int)blockIdx.y) * 32768)) + (((int)threadIdx.y) * 512)) + (((int)blockIdx.x) * 32)) + (((int)threadIdx.x) * 2)) + j_inner_inner_inner) + 16)] = C_local[(j_inner_inner_inner + 2)];
    C[(((((((((int)blockIdx.z) * 262144) + (((int)blockIdx.y) * 32768)) + (((int)threadIdx.y) * 512)) + (((int)blockIdx.x) * 32)) + (((int)threadIdx.x) * 2)) + j_inner_inner_inner) + 16400)] = C_local[(j_inner_inner_inner + 6)];
  }

