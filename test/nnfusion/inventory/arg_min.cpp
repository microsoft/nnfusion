// Microsoft (c) 2019
/**
 * \brief Unit tests for ir::ArgMin
 * \author generated by script
 */

#include "../test_util/common.hpp"
#include "nnfusion/core/operators/argmin.hpp"
#include "nnfusion/core/operators/parameter.hpp"

using namespace ngraph;

namespace nnfusion
{
    namespace test
    {
        template <typename T, size_t N>
        using NDArray = nnfusion::test::NDArray<T, N>;
    }

    namespace inventory
    {
        template <>
        shared_ptr<op::ArgMin> create_object<op::ArgMin, float>(int option)
        {
            switch (option)
            {
            case 0:
            {
                Shape shape{4, 3};
                auto A = make_shared<op::Parameter>(element::f32, shape);
                return make_shared<op::ArgMin>(A, 0, element::f32);
            }
            case 1:
            {
                Shape shape{2, 2, 5, 5};
                auto A = make_shared<op::Parameter>(element::f32, shape);
                return make_shared<op::ArgMin>(A, 3, element::f32);
            }
            default: return nullptr;
            }
        }

        template <>
        vector<float> generate_input<op::ArgMin, float>(int option)
        {
            switch (option)
            {
            case 0:
            {
                vector<float> a = vector<float>{12, 2, 10, 9, 8, 4, 6, 1, 5, 3, 11, 7};
                auto return_vector = vector<float>();
                return_vector.insert(return_vector.end(), a.begin(), a.end());
                return return_vector;
            }
            case 1:
            {
                vector<float> a = test::NDArray<float, 4>({{{{0.5f, 1.5f, 0.8f, 2.9f, 1.05f},
                                                             {0.5f, 3.5f, 2.0f, 1.0f, 0.2f},
                                                             {2.0f, 0.0f, 2.2f, 0.2f, 1.4f},
                                                             {2.9f, 0.0f, 1.52f, 1.2f, 2.22f},
                                                             {5.0f, 2.0f, 1.0f, 0.5f, 0.85f}},
                                                            {{0.25f, 0.02f, 0.02f, 2.2f, 0.001f},
                                                             {1.0f, 0.2f, 3.0f, 0.25f, 1.14f},
                                                             {2.25f, 10.1f, 1.0f, 0.02f, 2.22f},
                                                             {3.2f, 1.002f, 0.001f, 0.2f, 6.0f},
                                                             {2.0f, 0.0f, 0.0f, 0.0f, 0.0f}}},
                                                           {{{0.0f, 2.2f, 1.2f, 1.6f, 0.2f},
                                                             {0.01f, 0.0f, 0.22f, 0.02f, 1.1f},
                                                             {0.01f, 0.5f, 1.6f, 0.2f, 3.2f},
                                                             {2.4f, 0.5f, 0.0f, 3.0f, 0.1f},
                                                             {0.0f, 0.5f, 0.4f, 0.8f, 1.0f}},
                                                            {{2.0f, 1.0f, 0.0f, 0.0f, 1.0f},
                                                             {0.0f, 2.0f, 0.0f, 0.0f, 0.0f},
                                                             {1.0f, 1.0f, 2.0f, 0.0f, 2.0f},
                                                             {1.0f, 1.0f, 1.0f, 0.0f, 1.0f},
                                                             {1.0f, 0.0f, 0.0f, 0.0f, 2.0f}}}})
                                      .get_vector();
                auto return_vector = vector<float>();
                return_vector.insert(return_vector.end(), a.begin(), a.end());
                return return_vector;
            }
            default: return vector<float>();
            }
        }

        template <>
        vector<float> generate_output<op::ArgMin, float>(int option)
        {
            switch (option)
            {
            case 0:
            {
                vector<float> result = vector<float>{3, 2, 1};
                auto return_vector = vector<float>();
                return_vector.insert(return_vector.end(), result.begin(), result.end());
                return return_vector;
            }
            case 1:
            {
                vector<float> result = test::NDArray<float, 3>({{{0, 4, 1, 1, 3}, {4, 1, 3, 2, 1}},
                                                                {{0, 1, 0, 2, 0}, {2, 0, 3, 3, 1}}})
                                           .get_vector();
                auto return_vector = vector<float>();
                return_vector.insert(return_vector.end(), result.begin(), result.end());
                return return_vector;
            }
            default: return vector<float>();
            }
        }
    }
}