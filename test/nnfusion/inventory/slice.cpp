// Microsoft (c) 2019
/**
 * \brief Unit tests for ir::Slice
 * \author generated by script
 */

#include "nnfusion/core/operators/slice.hpp"
#include "../test_util/common.hpp"
#include "nnfusion/core/operators/parameter.hpp"

using namespace ngraph;

namespace nnfusion
{
    namespace test
    {
        template <typename T, size_t N>
        using NDArray = nnfusion::test::NDArray<T, N>;
    }

    namespace inventory
    {
        template <>
        shared_ptr<op::Slice> create_object<op::Slice, float>(int option)
        {
            switch (option)
            {
            case 0:
            {
                Shape shape_a{};
                auto A = make_shared<op::Parameter>(element::f32, shape_a);
                auto r = make_shared<op::Slice>(A, Coordinate{}, Coordinate{});
                return r;
            }
            case 1:
            {
                Shape shape_a{4, 4};
                auto A = make_shared<op::Parameter>(element::f32, shape_a);
                auto r = make_shared<op::Slice>(A, Coordinate{0, 1}, Coordinate{3, 3});
                return r;
            }
            case 2:
            {
                Shape shape_a{16};
                auto A = make_shared<op::Parameter>(element::f32, shape_a);
                auto r = make_shared<op::Slice>(A, Coordinate{2}, Coordinate{14});
                return r;
            }
            case 3:
            {
                Shape shape_a{4, 4};
                auto A = make_shared<op::Parameter>(element::f32, shape_a);
                auto r =
                    make_shared<op::Slice>(A, Coordinate{1, 0}, Coordinate{4, 4}, Strides{2, 3});
                return r;
            }
            case 4:
            {
                Shape shape_a{4, 4, 4};
                auto A = make_shared<op::Parameter>(element::f32, shape_a);
                auto r = make_shared<op::Slice>(A, Coordinate{1, 1, 1}, Coordinate{3, 3, 3});
                return r;
            }
            case 5:
            {
                Shape shape_a{4, 4, 4};
                auto A = make_shared<op::Parameter>(element::f32, shape_a);
                auto r = make_shared<op::Slice>(
                    A, Coordinate{0, 0, 0}, Coordinate{4, 4, 4}, Strides{2, 2, 2});
                return r;
            }
            case 6:
            {
                Shape shape_a{4, 4, 4};
                auto A = make_shared<op::Parameter>(element::f32, shape_a);
                auto r = make_shared<op::Slice>(
                    A, Coordinate{0, 0, 0}, Coordinate{4, 4, 4}, Strides{2, 2, 3});
                return r;
            }
            default: return nullptr;
            }
        }

        template <>
        vector<float> generate_input<op::Slice, float>(int option)
        {
            switch (option)
            {
            case 0:
            {
                vector<float> a = vector<float>{312};
                auto return_vector = vector<float>();
                return_vector.insert(return_vector.end(), a.begin(), a.end());
                return return_vector;
            }
            case 1:
            {
                vector<float> a =
                    vector<float>{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
                auto return_vector = vector<float>();
                return_vector.insert(return_vector.end(), a.begin(), a.end());
                return return_vector;
            }
            case 2:
            {
                vector<float> a =
                    vector<float>{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15};
                auto return_vector = vector<float>();
                return_vector.insert(return_vector.end(), a.begin(), a.end());
                return return_vector;
            }
            case 3:
            {
                vector<float> a =
                    vector<float>{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15};
                auto return_vector = vector<float>();
                return_vector.insert(return_vector.end(), a.begin(), a.end());
                return return_vector;
            }
            case 4:
            {
                vector<float> a =
                    vector<float>{0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  10, 11, 12, 13, 14, 15,
                                  16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
                                  32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,
                                  48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63};
                auto return_vector = vector<float>();
                return_vector.insert(return_vector.end(), a.begin(), a.end());
                return return_vector;
            }
            case 5:
            {
                vector<float> a =
                    vector<float>{0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  10, 11, 12, 13, 14, 15,
                                  16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
                                  32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,
                                  48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63};
                auto return_vector = vector<float>();
                return_vector.insert(return_vector.end(), a.begin(), a.end());
                return return_vector;
            }
            case 6:
            {
                vector<float> a =
                    vector<float>{0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  10, 11, 12, 13, 14, 15,
                                  16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
                                  32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,
                                  48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63};
                auto return_vector = vector<float>();
                return_vector.insert(return_vector.end(), a.begin(), a.end());
                return return_vector;
            }
            default: return vector<float>();
            }
        }

        template <>
        vector<float> generate_output<op::Slice, float>(int option)
        {
            switch (option)
            {
            case 0:
            {
                vector<float> result = vector<float>{312};
                auto return_vector = vector<float>();
                return_vector.insert(return_vector.end(), result.begin(), result.end());
                return return_vector;
            }
            case 1:
            {
                vector<float> result = vector<float>{2, 3, 6, 7, 10, 11};
                auto return_vector = vector<float>();
                return_vector.insert(return_vector.end(), result.begin(), result.end());
                return return_vector;
            }
            case 2:
            {
                vector<float> result = vector<float>{2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13};
                auto return_vector = vector<float>();
                return_vector.insert(return_vector.end(), result.begin(), result.end());
                return return_vector;
            }
            case 3:
            {
                vector<float> result = vector<float>{4, 7, 12, 15};
                auto return_vector = vector<float>();
                return_vector.insert(return_vector.end(), result.begin(), result.end());
                return return_vector;
            }
            case 4:
            {
                vector<float> result = vector<float>{21, 22, 25, 26, 37, 38, 41, 42};
                auto return_vector = vector<float>();
                return_vector.insert(return_vector.end(), result.begin(), result.end());
                return return_vector;
            }
            case 5:
            {
                vector<float> result = vector<float>{0, 2, 8, 10, 32, 34, 40, 42};
                auto return_vector = vector<float>();
                return_vector.insert(return_vector.end(), result.begin(), result.end());
                return return_vector;
            }
            case 6:
            {
                vector<float> result = vector<float>{0, 3, 8, 11, 32, 35, 40, 43};
                auto return_vector = vector<float>();
                return_vector.insert(return_vector.end(), result.begin(), result.end());
                return return_vector;
            }
            default: return vector<float>();
            }
        }
    }
}