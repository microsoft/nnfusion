// Microsoft (c) 2019
/**
 * \brief Unit tests for ir::Reshape
 * \author generated by script
 */

#include "nnfusion/core/operators/reshape.hpp"
#include "../test_util/common.hpp"
#include "nnfusion/core/operators/parameter.hpp"

using namespace ngraph;

namespace nnfusion
{
    namespace test
    {
        template <typename T, size_t N>
        using NDArray = nnfusion::test::NDArray<T, N>;
    }

    namespace inventory
    {
        template <>
        shared_ptr<op::Reshape> create_object<op::Reshape, float>(int option)
        {
            switch (option)
            {
            case 0:
            {
                Shape shape_a{2, 2, 3};
                auto A = make_shared<op::Parameter>(element::f32, shape_a);
                Shape shape_r{12};
                auto r = make_shared<op::Reshape>(A, AxisVector{0, 1, 2}, shape_r);
                return r;
            }
            case 1:
            {
                Shape shape_a{1, 1, 1};
                auto A = make_shared<op::Parameter>(element::f32, shape_a);
                Shape shape_r{};
                auto r = make_shared<op::Reshape>(A, AxisVector{0, 1, 2}, shape_r);
                return r;
            }
            case 2:
            {
                Shape shape_a{1, 1, 1};
                auto A = make_shared<op::Parameter>(element::f32, shape_a);
                Shape shape_r{};
                auto r = make_shared<op::Reshape>(A, AxisVector{1, 2, 0}, shape_r);
                return r;
            }
            case 3:
            {
                Shape shape_a{};
                auto A = make_shared<op::Parameter>(element::f32, shape_a);
                Shape shape_r{1, 1, 1, 1, 1, 1};
                auto r = make_shared<op::Reshape>(A, AxisVector{}, shape_r);
                return r;
            }
            case 4:
            {
                Shape shape_a{};
                auto A = make_shared<op::Parameter>(element::f32, shape_a);
                Shape shape_r{1};
                auto r = make_shared<op::Reshape>(A, AxisVector{}, shape_r);
                return r;
            }
            case 5:
            {
                Shape shape_a{3};
                auto A = make_shared<op::Parameter>(element::f32, shape_a);
                Shape shape_r{3, 1};
                auto r = make_shared<op::Reshape>(A, AxisVector{0}, shape_r);
                return r;
            }
            case 6:
            {
                Shape shape_a{3};
                auto A = make_shared<op::Parameter>(element::f32, shape_a);
                Shape shape_r{1, 3};
                auto r = make_shared<op::Reshape>(A, AxisVector{0}, shape_r);
                return r;
            }
            case 7:
            {
                Shape shape_a{3};
                auto A = make_shared<op::Parameter>(element::f32, shape_a);
                Shape shape_r{1, 3, 1};
                auto r = make_shared<op::Reshape>(A, AxisVector{0}, shape_r);
                return r;
            }
            case 8:
            {
                Shape shape_a{3, 3};
                auto A = make_shared<op::Parameter>(element::f32, shape_a);
                Shape shape_r{3, 3};
                auto r = make_shared<op::Reshape>(A, AxisVector{0, 1}, shape_r);
                return r;
            }
            case 9:
            {
                Shape shape_a{3, 3};
                auto A = make_shared<op::Parameter>(element::f32, shape_a);
                Shape shape_r{3, 3};
                auto r = make_shared<op::Reshape>(A, AxisVector{1, 0}, shape_r);
                return r;
            }
            case 10:
            {
                Shape shape_a{3, 2};
                auto A = make_shared<op::Parameter>(element::f32, shape_a);
                Shape shape_r{2, 3};
                auto r = make_shared<op::Reshape>(A, AxisVector{1, 0}, shape_r);
                return r;
            }
            case 11:
            {
                Shape shape_a{2, 6};
                auto A = make_shared<op::Parameter>(element::f32, shape_a);
                Shape shape_r{12};
                auto r = make_shared<op::Reshape>(A, AxisVector{1, 0}, shape_r);
                return r;
            }
            default: return nullptr;
            }
        }

        template <>
        vector<float> generate_input<op::Reshape, float>(int option)
        {
            switch (option)
            {
            case 0:
            {
                vector<float> a = vector<float>{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12};
                auto return_vector = vector<float>();
                return_vector.insert(return_vector.end(), a.begin(), a.end());
                return return_vector;
            }
            case 1:
            {
                vector<float> a = vector<float>{6};
                auto return_vector = vector<float>();
                return_vector.insert(return_vector.end(), a.begin(), a.end());
                return return_vector;
            }
            case 2:
            {
                vector<float> a = vector<float>{6};
                auto return_vector = vector<float>();
                return_vector.insert(return_vector.end(), a.begin(), a.end());
                return return_vector;
            }
            case 3:
            {
                vector<float> a = vector<float>{42};
                auto return_vector = vector<float>();
                return_vector.insert(return_vector.end(), a.begin(), a.end());
                return return_vector;
            }
            case 4:
            {
                vector<float> a = vector<float>{42};
                auto return_vector = vector<float>();
                return_vector.insert(return_vector.end(), a.begin(), a.end());
                return return_vector;
            }
            case 5:
            {
                vector<float> a = vector<float>{1, 2, 3};
                auto return_vector = vector<float>();
                return_vector.insert(return_vector.end(), a.begin(), a.end());
                return return_vector;
            }
            case 6:
            {
                vector<float> a = vector<float>{1, 2, 3};
                auto return_vector = vector<float>();
                return_vector.insert(return_vector.end(), a.begin(), a.end());
                return return_vector;
            }
            case 7:
            {
                vector<float> a = vector<float>{1, 2, 3};
                auto return_vector = vector<float>();
                return_vector.insert(return_vector.end(), a.begin(), a.end());
                return return_vector;
            }
            case 8:
            {
                vector<float> a = vector<float>{1, 2, 3, 4, 5, 6, 7, 8, 9};
                auto return_vector = vector<float>();
                return_vector.insert(return_vector.end(), a.begin(), a.end());
                return return_vector;
            }
            case 9:
            {
                vector<float> a = vector<float>{1, 2, 3, 4, 5, 6, 7, 8, 9};
                auto return_vector = vector<float>();
                return_vector.insert(return_vector.end(), a.begin(), a.end());
                return return_vector;
            }
            case 10:
            {
                vector<float> a = vector<float>{1, 2, 3, 4, 5, 6};
                auto return_vector = vector<float>();
                return_vector.insert(return_vector.end(), a.begin(), a.end());
                return return_vector;
            }
            case 11:
            {
                vector<float> a = vector<float>{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12};
                auto return_vector = vector<float>();
                return_vector.insert(return_vector.end(), a.begin(), a.end());
                return return_vector;
            }
            default: return vector<float>();
            }
        }

        template <>
        vector<float> generate_output<op::Reshape, float>(int option)
        {
            switch (option)
            {
            case 0:
            {
                vector<float> result = vector<float>{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12};
                auto return_vector = vector<float>();
                return_vector.insert(return_vector.end(), result.begin(), result.end());
                return return_vector;
            }
            case 1:
            {
                vector<float> result = vector<float>{6};
                auto return_vector = vector<float>();
                return_vector.insert(return_vector.end(), result.begin(), result.end());
                return return_vector;
            }
            case 2:
            {
                vector<float> result = vector<float>{6};
                auto return_vector = vector<float>();
                return_vector.insert(return_vector.end(), result.begin(), result.end());
                return return_vector;
            }
            case 3:
            {
                vector<float> result = vector<float>{42};
                auto return_vector = vector<float>();
                return_vector.insert(return_vector.end(), result.begin(), result.end());
                return return_vector;
            }
            case 4:
            {
                vector<float> result = vector<float>{42};
                auto return_vector = vector<float>();
                return_vector.insert(return_vector.end(), result.begin(), result.end());
                return return_vector;
            }
            case 5:
            {
                vector<float> result = vector<float>{1, 2, 3};
                auto return_vector = vector<float>();
                return_vector.insert(return_vector.end(), result.begin(), result.end());
                return return_vector;
            }
            case 6:
            {
                vector<float> result = vector<float>{1, 2, 3};
                auto return_vector = vector<float>();
                return_vector.insert(return_vector.end(), result.begin(), result.end());
                return return_vector;
            }
            case 7:
            {
                vector<float> result = vector<float>{1, 2, 3};
                auto return_vector = vector<float>();
                return_vector.insert(return_vector.end(), result.begin(), result.end());
                return return_vector;
            }
            case 8:
            {
                vector<float> result = vector<float>{1, 2, 3, 4, 5, 6, 7, 8, 9};
                auto return_vector = vector<float>();
                return_vector.insert(return_vector.end(), result.begin(), result.end());
                return return_vector;
            }
            case 9:
            {
                vector<float> result = vector<float>{1, 4, 7, 2, 5, 8, 3, 6, 9};
                auto return_vector = vector<float>();
                return_vector.insert(return_vector.end(), result.begin(), result.end());
                return return_vector;
            }
            case 10:
            {
                vector<float> result = vector<float>{1, 3, 5, 2, 4, 6};
                auto return_vector = vector<float>();
                return_vector.insert(return_vector.end(), result.begin(), result.end());
                return return_vector;
            }
            case 11:
            {
                vector<float> result = vector<float>{1, 7, 2, 8, 3, 9, 4, 10, 5, 11, 6, 12};
                auto return_vector = vector<float>();
                return_vector.insert(return_vector.end(), result.begin(), result.end());
                return return_vector;
            }
            default: return vector<float>();
            }
        }
    }
}