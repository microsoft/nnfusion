// Microsoft (c) 2019
/**
 * \brief Unit tests for ir::MaxPool
 * \author generated by script
 */

#include "nnfusion/core/operators/max_pool.hpp"
#include "../test_util/common.hpp"
#include "nnfusion/core/operators/parameter.hpp"

using namespace ngraph;

namespace nnfusion
{
    namespace test
    {
        template <typename T, size_t N>
        using NDArray = nnfusion::test::NDArray<T, N>;
    }

    namespace inventory
    {
        template <>
        shared_ptr<op::MaxPool> create_object<op::MaxPool, float>(int option)
        {
            switch (option)
            {
            case 0:
            {
                Shape shape_a{2, 1, 14};
                auto A = make_shared<op::Parameter>(element::f32, shape_a);
                Shape window_shape{3};
                return make_shared<op::MaxPool>(A, window_shape);
            }
            case 1:
            {
                Shape shape_a{2, 2, 14};
                auto A = make_shared<op::Parameter>(element::f32, shape_a);
                Shape window_shape{3};
                return make_shared<op::MaxPool>(A, window_shape);
            }
            case 2:
            {
                Shape shape_a{2, 2, 5, 5};
                auto A = make_shared<op::Parameter>(element::f32, shape_a);
                Shape window_shape{2, 3};
                return make_shared<op::MaxPool>(A, window_shape);
            }
            default: return nullptr;
            }
        }

        template <>
        vector<float> generate_input<op::MaxPool, float>(int option)
        {
            switch (option)
            {
            case 0:
            {
                vector<float> a =
                    test::NDArray<float, 3>({{{0, 1, 0, 2, 1, 0, 3, 2, 0, 0, 2, 0, 0, 0}},
                                             {{0, 2, 1, 1, 0, 0, 0, 2, 0, 1, 0, 0, 1, 2}}})
                        .get_vector();
                auto return_vector = vector<float>();
                return_vector.insert(return_vector.end(), a.begin(), a.end());
                return return_vector;
            }
            case 1:
            {
                vector<float> a =
                    test::NDArray<float, 3>({{{0, 1, 0, 2, 1, 0, 3, 2, 0, 0, 2, 0, 0, 0},
                                              {0, 0, 0, 2, 0, 0, 2, 3, 0, 1, 2, 0, 1, 0}},
                                             {{0, 2, 1, 1, 0, 0, 0, 2, 0, 1, 0, 0, 1, 2},
                                              {2, 1, 0, 0, 1, 0, 2, 0, 0, 0, 1, 1, 2, 0}}})
                        .get_vector();
                auto return_vector = vector<float>();
                return_vector.insert(return_vector.end(), a.begin(), a.end());
                return return_vector;
            }
            case 2:
            {
                vector<float> a = test::NDArray<float, 4>({{{{0, 1, 0, 2, 1},
                                                             {0, 3, 2, 0, 0},
                                                             {2, 0, 0, 0, 1},
                                                             {2, 0, 1, 1, 2},
                                                             {0, 2, 1, 0, 0}},
                                                            {{0, 0, 0, 2, 0},
                                                             {0, 2, 3, 0, 1},
                                                             {2, 0, 1, 0, 2},
                                                             {3, 1, 0, 0, 0},
                                                             {2, 0, 0, 0, 0}}},
                                                           {{{0, 2, 1, 1, 0},
                                                             {0, 0, 2, 0, 1},
                                                             {0, 0, 1, 2, 3},
                                                             {2, 0, 0, 3, 0},
                                                             {0, 0, 0, 0, 0}},
                                                            {{2, 1, 0, 0, 1},
                                                             {0, 2, 0, 0, 0},
                                                             {1, 1, 2, 0, 2},
                                                             {1, 1, 1, 0, 1},
                                                             {1, 0, 0, 0, 2}}}})
                                      .get_vector();
                auto return_vector = vector<float>();
                return_vector.insert(return_vector.end(), a.begin(), a.end());
                return return_vector;
            }
            default: return vector<float>();
            }
        }

        template <>
        vector<float> generate_output<op::MaxPool, float>(int option)
        {
            switch (option)
            {
            case 0:
            {
                vector<float> result =
                    test::NDArray<float, 3>({{{1, 2, 2, 2, 3, 3, 3, 2, 2, 2, 2, 0}},
                                             {{2, 2, 1, 1, 0, 2, 2, 2, 1, 1, 1, 2}}})
                        .get_vector();
                auto return_vector = vector<float>();
                return_vector.insert(return_vector.end(), result.begin(), result.end());
                return return_vector;
            }
            case 1:
            {
                vector<float> result =
                    test::NDArray<float, 3>({{{1, 2, 2, 2, 3, 3, 3, 2, 2, 2, 2, 0},
                                              {0, 2, 2, 2, 2, 3, 3, 3, 2, 2, 2, 1}},
                                             {{2, 2, 1, 1, 0, 2, 2, 2, 1, 1, 1, 2},
                                              {2, 1, 1, 1, 2, 2, 2, 0, 1, 1, 2, 2}}})
                        .get_vector();
                auto return_vector = vector<float>();
                return_vector.insert(return_vector.end(), result.begin(), result.end());
                return return_vector;
            }
            case 2:
            {
                vector<float> result =
                    test::NDArray<float, 4>({{{{3, 3, 2}, {3, 3, 2}, {2, 1, 2}, {2, 2, 2}},
                                              {{3, 3, 3}, {3, 3, 3}, {3, 1, 2}, {3, 1, 0}}},
                                             {{{2, 2, 2}, {2, 2, 3}, {2, 3, 3}, {2, 3, 3}},
                                              {{2, 2, 1}, {2, 2, 2}, {2, 2, 2}, {1, 1, 2}}}})
                        .get_vector();
                auto return_vector = vector<float>();
                return_vector.insert(return_vector.end(), result.begin(), result.end());
                return return_vector;
            }
            default: return vector<float>();
            }
        }
    }
}